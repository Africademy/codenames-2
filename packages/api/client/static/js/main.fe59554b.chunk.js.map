{"version":3,"sources":["assets/images/default.jpg","../../../src/messages/index.ts","../../../src/responses/index.ts","../../../src/responses/responseCodes.ts","../../../src/responses/responses.ts","../../../src/payloads/index.ts","../../../src/constants/index.ts","components/rules/Rules.tsx","components/login/login.tsx","components/main_menu/MainMenu.tsx","components/card/Card.tsx","components/game_grid/GameGrid.tsx","components/new_game_modal/NewGameModal.tsx","components/spymaster_grid/SpyMasterGrid.tsx","components/game/Game.tsx","components/game_header/GameHeader.tsx","components/home/Home.tsx","components/App.tsx","serviceWorker.js","services/GameService.ts","stores/store.ts","index.tsx","../../src/index.ts","assets/images/blue.jpeg","assets/images/red.jpeg","assets/images/civilian.jpg","assets/images/assasin.jpg"],"names":["module","exports","ResponseType","gameId","CardType","GameStatus","Rules","Message","as","attached","Segment","Component","Login","inject","observer","props","inputRef","onSignIn","a","store","signIn","state","name","value","handleChange","bind","this","Form","className","Group","controlId","Label","Control","plaintext","placeholder","onChange","Button","variant","size","block","onClick","event","setState","target","MainMenu","onCreateGame","createGame","onJoinGame","joinGame","handleShow","show","handleClose","handleGameIdChange","user","isSignedIn","Modal","onHide","aria-labelledby","centered","Header","closeButton","Title","Body","Footer","Card","word","card","style","width","key","Img","src","cardImage","height","chosen","defaultImage","type","Assasin","assasinImage","Blue","blueImage","Red","redImage","Civilian","civilianImage","GameGrid","COLS","cardTable","cards","returnedArray","currentArray","forEach","index","push","prevProps","onCardClick","map","Row","Col","md","NewGameModal","onStartGame","startGame","game","status","New","Error","Dialog","id","formattedPlayerNames","players","player","SpyMasterGrid","typeTable","typeArr","typeImage","console","log","Game","handleSnackbarClose","clearNotifications","isSpymMaster","setNotification","chooseWord","length","Snackbar","open","newNotification","autoHideDuration","onClose","elevation","severity","notification","GameHeader","onBeSpyMaster","chooseSpyMaster","onLeaveGame","leaveGame","float","join","spyMasters","Home","App","handleErrorClose","clearErrors","error","Boolean","window","location","hostname","match","connection","document","protocol","host","ioClient","io","timeout","GameService","subscribeToNotifications","on","sendRequest","loginPayload","playerId","createGamePayload","joinGamePayload","startGamePayload","chooseWordPayload","chooseSpyMasterPayload","leaveGamePayload","pingPayload","connected","connect","payload","openConnection","Promise","resolve","reject","emit","result","message","persist","gameService","response","gameInfo","action","data","common","words","InProgress","playersInfo","cardInfo","cardData","findIndex","i","spyMastersInfo","gameNotification","notificationText","gameAborted","initializeStore","reason","ping","isConnected","setUserInfo","userInfo","spyMasterCards","text","undefined","observable","computed","ReactDOM","render","gameStore","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch"],"mappings":"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","file":"static/js/main.fe59554b.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/default.20a5c089.jpg\";","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.MESSAGES = {\n    pong: \"PONG\",\n    ping: \"PING\",\n    login: \"LOGIN\",\n    logout: \"LOGOUT\",\n    joinGame: \"JOIN_GAME\",\n    createGame: \"CREATE_GAME\",\n    startGame: \"START_GAME\",\n    leaveGame: \"LEAVE_GAME\",\n    chooseWord: \"CHOOSE_WORD\",\n    chooseSpyMaster: \"CHOOSE_SPY_MASTER\",\n    playAgain: \"PLAY_AGAIN\",\n    gameOver: \"GAME_OVER\",\n    gameAborted: \"GAME_ABORTED\",\n    gameNotification: \"GAME_NOTIFICATION\",\n    words: \"WORDS\",\n    playersInfo: \"PLAYERS_INFO\",\n    spyMastersInfo: \"SPYMASTERS_INFO\",\n    cardInfo: \"CARD_INFO\",\n};\n//# sourceMappingURL=index.js.map","\"use strict\";\nfunction __export(m) {\n    for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];\n}\nObject.defineProperty(exports, \"__esModule\", { value: true });\n__export(require(\"./responseCodes\"));\n__export(require(\"./responses\"));\n//# sourceMappingURL=index.js.map","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.RESPONSE_CODES = {\n    success: \"SUCCESS\",\n    failed: \"FAILED\",\n    loginFailed: \"LOGIN_FAILED\",\n    loginSuccess: \"LOGIN_SUCCESS\",\n    gameNotification: \"GAME_NOTIFICATION\"\n};\n//# sourceMappingURL=responseCodes.js.map","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar ResponseType;\n(function (ResponseType) {\n    ResponseType[ResponseType[\"error\"] = 0] = \"error\";\n    ResponseType[ResponseType[\"info\"] = 1] = \"info\";\n})(ResponseType = exports.ResponseType || (exports.ResponseType = {}));\n//# sourceMappingURL=responses.js.map","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nconst messages_1 = require(\"../messages\");\nexports.loginPayload = (name) => {\n    return { operation: messages_1.MESSAGES.login, payload: { name } };\n};\nexports.createGamePayload = (playerId) => {\n    return { operation: messages_1.MESSAGES.createGame, payload: { playerId } };\n};\nexports.joinGamePayload = (playerId, gameId) => {\n    return { operation: messages_1.MESSAGES.joinGame, payload: { playerId, gameId } };\n};\nexports.startGamePayload = (gameId) => {\n    return { operation: messages_1.MESSAGES.startGame, payload: { gameId } };\n};\nexports.chooseWordPayload = (gameId, word) => {\n    return { operation: messages_1.MESSAGES.chooseWord, payload: { gameId, word } };\n};\nexports.chooseSpyMasterPayload = (gameId, playerId) => {\n    return { operation: messages_1.MESSAGES.chooseSpyMaster, payload: { gameId, playerId } };\n};\nexports.leaveGamePayload = (gameId, playerId) => {\n    return { operation: messages_1.MESSAGES.leaveGame, payload: { gameId, playerId } };\n};\nexports.pingPayload = () => {\n    return { operation: messages_1.MESSAGES.ping, payload: { ping: \"ping\" } };\n};\n//# sourceMappingURL=index.js.map","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar CardType;\n(function (CardType) {\n    CardType[CardType[\"Blue\"] = 0] = \"Blue\";\n    CardType[CardType[\"Red\"] = 1] = \"Red\";\n    CardType[CardType[\"Civilian\"] = 2] = \"Civilian\";\n    CardType[CardType[\"Assasin\"] = 3] = \"Assasin\";\n})(CardType = exports.CardType || (exports.CardType = {}));\nvar GameStatus;\n(function (GameStatus) {\n    GameStatus[GameStatus[\"New\"] = 0] = \"New\";\n    GameStatus[GameStatus[\"InProgress\"] = 1] = \"InProgress\";\n    GameStatus[GameStatus[\"Over\"] = 2] = \"Over\";\n    GameStatus[GameStatus[\"Aborted\"] = 3] = \"Aborted\";\n})(GameStatus = exports.GameStatus || (exports.GameStatus = {}));\n//# sourceMappingURL=index.js.map","import React, { Component } from \"react\";\nimport { Message, Segment } from \"semantic-ui-react\";\n\nclass Rules extends Component<{}, {}> {\n  render() {\n    return (\n      <div>\n        <Message as=\"h4\" attached=\"top\">\n          How to play!\n        </Message>\n\n        <Segment attached={true}>\n          <ul>\n            <h5>How To</h5>\n            <li>Sign in with any name to play</li>\n            <li>\n              Afer successfully signing in you can either create a new game or\n              join an existing one\n            </li>\n            <li>\n              If creating a new game, you will get a game ID which you can share\n              with people you wish join the game\n            </li>\n            <li>\n              To join an existing game simply click \"Join Game\" and enter the ID\n              of the game you want to join\n            </li>\n          </ul>\n        </Segment>\n      </div>\n    );\n  }\n}\n\nexport default Rules;\n","import React, { Component } from \"react\";\nimport { inject, observer } from \"mobx-react\";\nimport { Form, Button } from \"react-bootstrap\";\n\nimport { IStore } from \"../../stores/IStore\";\n\nimport \"./login.css\";\n\ninterface IProps {\n  store?: IStore;\n}\n\ninterface IState {\n  name: string;\n}\n\n@inject(\"store\")\n@observer\nclass Login extends Component<IProps, IState> {\n  private inputRef: any;\n\n  private get store(): IStore {\n    return this.props.store as IStore;\n  }\n\n  constructor(props: IProps) {\n    super(props);\n    this.state = { name: \"\" };\n\n    this.handleChange = this.handleChange.bind(this);\n    this.onSignIn = this.onSignIn.bind(this);\n  }\n\n  render() {\n    return (\n      <Form className=\"form\">\n        <Form.Group controlId=\"formPlaintextEmail\">\n          <Form.Label className=\"label\">Name</Form.Label>\n          <Form.Control\n            plaintext\n            placeholder=\"your name goes here\"\n            className=\"input\"\n            value={this.state.name}\n            onChange={this.handleChange}\n          />\n        </Form.Group>\n        <Button\n          variant=\"primary\"\n          size=\"lg\"\n          block\n          className=\"primary-button\"\n          onClick={this.onSignIn}\n        >\n          Sign In\n        </Button>\n      </Form>\n    );\n  }\n\n  private handleChange(event: any) {\n    this.setState({ name: event.target.value } as IState);\n  }\n\n  private onSignIn = async () => {\n    await this.store.signIn(this.state.name);\n\n    if (this.inputRef) {\n      this.inputRef.value = \"\";\n    }\n  };\n}\n\nexport default Login;\n","import React, { Component } from \"react\";\n\nimport { inject, observer } from \"mobx-react\";\nimport { Form, Button, Modal } from \"react-bootstrap\";\n\nimport { IStore } from \"../../stores/IStore\";\n\nimport Login from \"../login/login\";\n\ninterface IProps {\n  store?: IStore;\n}\n\ninterface IState {\n  show: boolean;\n  gameId: string;\n}\n\n@inject(\"store\")\n@observer\nclass MainMenu extends Component<IProps, IState> {\n  private get store(): IStore {\n    return this.props.store as IStore;\n  }\n\n  constructor(props: IProps) {\n    super(props);\n    this.state = { show: false, gameId: \"\" };\n\n    this.onCreateGame = this.onCreateGame.bind(this);\n    this.onJoinGame = this.onJoinGame.bind(this);\n    this.handleShow = this.handleShow.bind(this);\n    this.handleClose = this.handleClose.bind(this);\n\n    this.handleGameIdChange = this.handleGameIdChange.bind(this);\n  }\n\n  render() {\n    if (!this.props.store?.user.isSignedIn) {\n      return <Login />;\n    }\n\n    // TODO: pull into its own component\n    return (\n      <>\n        <Form className=\"main-menu\">\n          <Button\n            variant=\"primary\"\n            size=\"lg\"\n            block\n            className=\"primary-button\"\n            onClick={this.onCreateGame}\n          >\n            Create New Game\n          </Button>\n          <br />\n          <Button\n            variant=\"primary\"\n            size=\"lg\"\n            block\n            className=\"primary-button\"\n            onClick={this.handleShow}\n          >\n            Join Existing Game\n          </Button>\n        </Form>\n        <Modal\n          show={this.state.show}\n          onHide={this.handleClose}\n          aria-labelledby=\"contained-modal-title-vcenter\"\n          centered\n        >\n          <Modal.Header closeButton>\n            <Modal.Title>Enter ID of game to join</Modal.Title>\n          </Modal.Header>\n          <Modal.Body>\n            <Form className=\"form\">\n              <Form.Group controlId=\"formPlaintextEmail\">\n                <Form.Control\n                  plaintext\n                  placeholder=\"game ID goes here\"\n                  className=\"input\"\n                  value={this.state.gameId}\n                  onChange={this.handleGameIdChange}\n                />\n              </Form.Group>\n            </Form>\n          </Modal.Body>\n          <Modal.Footer>\n            <Button variant=\"secondary\" onClick={this.handleClose}>\n              Close\n            </Button>\n            <Button variant=\"primary\" onClick={this.onJoinGame}>\n              Join Game\n            </Button>\n          </Modal.Footer>\n        </Modal>\n      </>\n    );\n  }\n\n  private onCreateGame = async () => {\n    await this.store.createGame();\n  };\n\n  private onJoinGame = async () => {\n    await this.store.joinGame(this.state.gameId);\n  };\n\n  private handleShow = async () => {\n    this.setState({ ...this.state, show: true });\n  };\n\n  private handleClose = async () => {\n    this.setState({ ...this.state, show: false });\n  };\n\n  private handleGameIdChange(event: any) {\n    this.setState({ ...this.state, gameId: event.target.value });\n  }\n}\n\nexport default MainMenu;\n","import React, { Component } from \"react\";\nimport { CardType } from \"@codenames/common\";\n\nimport { Card as BootstrapCard } from \"react-bootstrap\";\n\nimport blueImage from \"../../assets/images/blue.jpeg\";\nimport redImage from \"../../assets/images/red.jpeg\";\nimport civilianImage from \"../../assets/images/civilian.jpg\";\nimport assasinImage from \"../../assets/images/assasin.jpg\";\nimport defaultImage from \"../../assets/images/default.jpg\";\n\nimport { ICard } from \"src/stores/models/ICard\";\n\ninterface IProps {\n  card: ICard;\n  onClick: Function;\n}\n\nclass Card extends Component<IProps, {}> {\n  constructor(props: Readonly<IProps>) {\n    super(props);\n  }\n\n  onClick(word: string) {\n    this.props.onClick(word);\n  }\n\n  render() {\n    const { card } = this.props;\n\n    return (\n      <BootstrapCard\n        onClick={() => this.onClick(card.word)}\n        style={{ width: \"11rem\" }}\n        key={card.word}\n      >\n        <BootstrapCard.Img\n          variant=\"top\"\n          src={this.cardImage(card)}\n          style={{ height: \"11rem\" }}\n        />\n        <BootstrapCard.Body>\n          <BootstrapCard.Title>{card.word}</BootstrapCard.Title>\n        </BootstrapCard.Body>\n      </BootstrapCard>\n    );\n  }\n\n  private cardImage(card: ICard): string {\n    if (!card.chosen) {\n      return defaultImage;\n    }\n\n    switch (card.type) {\n      case CardType.Assasin:\n        return assasinImage;\n      case CardType.Blue:\n        return blueImage;\n      case CardType.Red:\n        return redImage;\n      case CardType.Civilian:\n        return civilianImage;\n      default:\n        return defaultImage;\n    }\n  }\n}\n\nexport default Card;\n","import React, { Component } from \"react\";\n\nimport { ICard } from \"src/stores/models/ICard\";\nimport Card from \"../card/Card\";\nimport { Row, Col } from \"react-bootstrap\";\n\ninterface IProps {\n  cards: ICard[];\n  onCardClick: Function;\n}\n\ninterface IState {\n  cardTable: ICard[][];\n}\n\nclass GameGrid extends Component<IProps, IState> {\n  //TODO: generallize\n  COLS = 5;\n\n  constructor(props: IProps) {\n    super(props);\n\n    this.state = { cardTable: this.cardTable(this.props.cards) };\n  }\n\n  private cardTable(cards: ICard[]): ICard[][] {\n    let returnedArray: ICard[][] = [];\n    let currentArray: ICard[] = [];\n\n    cards.forEach((card, index) => {\n      currentArray.push(card);\n\n      if (index !== 0 && (index + 1) % this.COLS === 0) {\n        returnedArray.push(currentArray);\n        currentArray = [];\n      }\n    });\n\n    return returnedArray;\n  }\n\n  componentDidUpdate(prevProps: any) {\n    if (this.props !== prevProps) {\n      this.setState({\n        ...this.state,\n        cardTable: this.cardTable(this.props.cards),\n      });\n    }\n  }\n\n  render() {\n    const { onCardClick } = this.props;\n\n    return this.state.cardTable.map((cards) => (\n      <Row>\n        {cards.map((card) => {\n          return (\n            <Col md=\"auto\">\n              <Card key={card.word} card={card} onClick={onCardClick} />\n            </Col>\n          );\n        })}\n      </Row>\n    ));\n  }\n}\n\nexport default GameGrid;\n","import React, { Component } from \"react\";\nimport { inject, observer } from \"mobx-react\";\n\nimport { IStore } from \"../../stores/IStore\";\n\nimport { GameStatus } from \"@codenames/common\";\n\nimport Modal from \"react-bootstrap/Modal\";\nimport { Button } from \"react-bootstrap\";\n\ninterface IProps {\n  store?: IStore;\n}\n\n@inject(\"store\")\n@observer\nclass NewGameModal extends Component<IProps, {}> {\n  private get store(): IStore {\n    return this.props.store as IStore;\n  }\n\n  constructor(props: IProps) {\n    super(props);\n\n    this.onStartGame = this.onStartGame.bind(this);\n  }\n\n  private get formattedPlayerNames() {\n    return this.store.game.players?.map((player) => {\n      return (\n        <h4>\n          {player}\n          <br />\n        </h4>\n      );\n    });\n  }\n\n  private onStartGame = async () => {\n    await this.store.startGame();\n  };\n\n  render() {\n    if (this.store.game.status !== GameStatus.New) {\n      throw new Error(\"Cards need to be present\");\n    }\n\n    return (\n      <Modal.Dialog>\n        <Modal.Header>\n          <Modal.Title>Game Id: {this.store.game.id}</Modal.Title>\n        </Modal.Header>\n\n        <Modal.Body>{this.formattedPlayerNames}</Modal.Body>\n\n        <Modal.Footer>\n          <Button variant=\"primary\" onClick={this.onStartGame}>\n            Start Game\n          </Button>\n        </Modal.Footer>\n      </Modal.Dialog>\n    );\n  }\n}\n\nexport default NewGameModal;\n","import React, { Component } from \"react\";\n\nimport { Card as BootstrapCard } from \"react-bootstrap\";\nimport { Row, Col } from \"react-bootstrap\";\nimport { Message, Segment } from \"semantic-ui-react\";\n\nimport { CardType } from \"@codenames/common\";\n\nimport { ICard } from \"src/stores/models/ICard\";\n\nimport blueImage from \"../../assets/images/blue.jpeg\";\nimport redImage from \"../../assets/images/red.jpeg\";\nimport civilianImage from \"../../assets/images/civilian.jpg\";\nimport assasinImage from \"../../assets/images/assasin.jpg\";\n\ninterface IProps {\n  cards: ICard[];\n}\n\ninterface IState {\n  typeTable: CardType[][];\n}\n\nclass SpyMasterGrid extends Component<IProps, IState> {\n  //TODO: move to const file\n  COLS = 5;\n\n  constructor(props: IProps) {\n    super(props);\n\n    this.state = { typeTable: this.typeTable(this.props.cards) };\n  }\n\n  private typeTable(cards: ICard[]): CardType[][] {\n    let returnedArray: CardType[][] = [];\n    let currentArray: CardType[] = [];\n\n    cards.forEach((card, index) => {\n      if (card.type == null) {\n        throw new Error(`Missing type for card ${card.word}`);\n      }\n\n      currentArray.push(card.type);\n\n      if (index !== 0 && (index + 1) % this.COLS === 0) {\n        returnedArray.push(currentArray);\n        currentArray = [];\n      }\n    });\n\n    return returnedArray;\n  }\n\n  render() {\n    return (\n      <>\n        <Message as=\"h4\" attached=\"top\">\n          Spy Masters Grid\n        </Message>\n        <Segment attached={true}>\n          {this.state.typeTable.map((typeArr) => (\n            <Row>\n              {typeArr.map((type) => {\n                return (\n                  <Col md=\"auto\">\n                    <BootstrapCard style={{ width: \"5rem\" }}>\n                      <BootstrapCard.Img src={this.typeImage(type)} />\n                    </BootstrapCard>\n                  </Col>\n                );\n              })}\n            </Row>\n          ))}\n        </Segment>\n      </>\n    );\n  }\n\n  private typeImage(type: CardType): string {\n    switch (type) {\n      case CardType.Assasin:\n        return assasinImage;\n      case CardType.Blue:\n        return blueImage;\n      case CardType.Red:\n        return redImage;\n      case CardType.Civilian:\n        return civilianImage;\n      default:\n        console.log(\"should not be reached\");\n        return \"\";\n    }\n  }\n}\n\nexport default SpyMasterGrid;\n","import React, { Component } from \"react\";\nimport { inject, observer } from \"mobx-react\";\n\nimport { IStore } from \"../../stores/IStore\";\n\nimport GameGrid from \"../game_grid/GameGrid\";\n\nimport Snackbar from \"@material-ui/core/Snackbar\";\nimport MuiAlert from \"@material-ui/lab/Alert\";\nimport { Row, Col } from \"react-bootstrap\";\n\nimport { GameStatus } from \"@codenames/common\";\nimport NewGameModal from \"../new_game_modal/NewGameModal\";\nimport SpyMasterGrid from \"../spymaster_grid/SpyMasterGrid\";\n\ninterface IProps {\n  store?: IStore;\n}\n\n@inject(\"store\")\n@observer\nclass Game extends Component<IProps, {}> {\n  private get store(): IStore {\n    return this.props.store as IStore;\n  }\n\n  constructor(props: IProps) {\n    super(props);\n  }\n\n  handleSnackbarClose = () => {\n    this.store.clearNotifications();\n  };\n\n  onCardClick = (word: string) => {\n    if (this.store.user.isSpymMaster) {\n      this.store.setNotification(\"Spy Master cannot choose card\");\n      return;\n    }\n    this.store.chooseWord(word);\n  };\n\n  render() {\n    if (this.store.game.status === GameStatus.New) {\n      return <NewGameModal />;\n    }\n\n    if (this.store.game.cards == null || this.store.game.cards.length === 0) {\n      throw new Error(\"Cards need to be present\");\n    }\n\n    return (\n      <>\n        <Row>\n          <Col md=\"auto\">\n            <GameGrid\n              cards={this.store.game.cards}\n              onCardClick={this.onCardClick}\n            />\n          </Col>\n          <Col md=\"auto\">\n            {this.store.user.isSpymMaster && (\n              <SpyMasterGrid cards={this.store.game.cards} />\n            )}\n          </Col>\n        </Row>\n\n        <Snackbar\n          open={this.store.newNotification}\n          autoHideDuration={6000}\n          onClose={this.handleSnackbarClose}\n        >\n          <MuiAlert\n            onClose={this.handleSnackbarClose}\n            elevation={6}\n            variant=\"filled\"\n            severity=\"info\"\n          >\n            {this.store.notification}\n          </MuiAlert>\n        </Snackbar>\n      </>\n    );\n  }\n}\n\nexport default Game;\n","import React, { Component } from \"react\";\nimport { inject, observer } from \"mobx-react\";\n\nimport { Message, Segment } from \"semantic-ui-react\";\n\nimport { IStore } from \"../../stores/IStore\";\n\ninterface IProps {\n  store?: IStore;\n}\n\n@inject(\"store\")\n@observer\nclass GameHeader extends Component<IProps, {}> {\n  private get store(): IStore {\n    return this.props.store as IStore;\n  }\n\n  constructor(props: IProps) {\n    super(props);\n  }\n\n  onBeSpyMaster = () => {\n    this.store.chooseSpyMaster();\n  };\n\n  onLeaveGame = () => {\n    this.store.leaveGame();\n  };\n\n  render() {\n    return (\n      <div>\n        <Message as=\"h4\" attached=\"top\">\n          Menu\n          <input\n            type=\"button\"\n            value=\"Leave Game\"\n            style={{ float: \"right\" }}\n            onClick={this.onLeaveGame}\n          />\n        </Message>\n\n        <Segment attached={true}>\n          <div>Players: {this.store.game.players?.join(\" , \")}</div>\n          <div>\n            Spy Masters: {this.store.game.spyMasters?.join(\" & \")}\n            <input\n              type=\"button\"\n              value=\"Be Spy Master!\"\n              onClick={this.onBeSpyMaster}\n              style={{ float: \"right\" }}\n            />\n          </div>\n        </Segment>\n      </div>\n    );\n  }\n}\n\nexport default GameHeader;\n","import React, { Component, Fragment } from \"react\";\nimport { inject, observer } from \"mobx-react\";\n\nimport { IStore } from \"../../stores/IStore\";\n\nimport Rules from \"../rules/Rules\";\nimport MainMenu from \"../main_menu/MainMenu\";\nimport Game from \"../game/Game\";\nimport GameHeader from \"../game_header/GameHeader\";\n\nimport \"./home.css\";\n\ninterface IProps {\n  store?: IStore;\n}\n\n@inject(\"store\")\n@observer\nclass Home extends Component<IProps, {}> {\n  private get store(): IStore {\n    return this.props.store as IStore;\n  }\n\n  constructor(props: IProps) {\n    super(props);\n  }\n\n  render() {\n    if (!this.store.game.id) {\n      return (\n        <Fragment>\n          <Rules />\n          <MainMenu />\n        </Fragment>\n      );\n    }\n\n    return (\n      <Fragment>\n        <GameHeader />\n        <Game />\n      </Fragment>\n    );\n  }\n}\n\nexport default Home;\n","import React, { Component } from \"react\";\nimport { inject, observer } from \"mobx-react\";\n\nimport Snackbar from \"@material-ui/core/Snackbar\";\nimport MuiAlert from \"@material-ui/lab/Alert\";\n\nimport { IStore } from \"src/stores/IStore\";\n\nimport Home from \"./home/Home\";\n\nimport \"./App.css\";\n\ninterface IProps {\n  store?: IStore;\n}\n\n@inject(\"store\")\n@observer\nclass App extends Component<IProps, {}> {\n  private get store(): IStore {\n    return this.props.store as IStore;\n  }\n\n  constructor(props: IProps) {\n    super(props);\n\n    this.handleErrorClose = this.handleErrorClose.bind(this);\n  }\n\n  private handleErrorClose() {\n    this.store.clearErrors();\n  }\n\n  render() {\n    return (\n      <>\n        <Home />\n        <Snackbar\n          open={!!this.store.game.error}\n          autoHideDuration={10000}\n          onClose={this.handleErrorClose}\n        >\n          <MuiAlert\n            elevation={6}\n            variant=\"filled\"\n            severity=\"error\"\n            onClose={this.handleErrorClose}\n          >\n            {this.store.game.error}\n          </MuiAlert>\n        </Snackbar>\n      </>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import {\n  // chooseWordPayload,\n  // createGamePayload,\n  joinGamePayload,\n  loginPayload,\n  pingPayload,\n  ResponseType,\n  SuccessResponse,\n  createGamePayload,\n  startGamePayload,\n  chooseWordPayload,\n  chooseSpyMasterPayload,\n  leaveGamePayload,\n} from \"@codenames/common\";\nimport * as io from \"socket.io-client\";\n\nconst ifDevelopment = process.env.NODE_ENV === \"development\";\nconst connection = ifDevelopment\n  ? \"http://localhost:4500/\"\n  : document.location.protocol + \"//\" + document.location.host;\nconst ioClient: SocketIOClient.Socket = io.connect(connection, {\n  timeout: 200000,\n});\n\nclass GameService {\n  /**\n   * Initializes a new instance of the GameService.\n   * @param subscribeToNotifications The callback to subscribe notifications\n   */\n  constructor(\n    private subscribeToNotifications: (data: SuccessResponse, cb: any) => void\n  ) {\n    ioClient.on(\"data\", this.subscribeToNotifications);\n\n    // setInterval(() => {\n    //   this.ping().then(() => \"\");\n    // }, 10000);\n  }\n\n  /**\n   * Sigin to the game.\n   * @param name name of the user.\n   */\n  public signIn(name: string): Promise<any> {\n    return this.sendRequest(loginPayload(name));\n  }\n\n  /**\n   * Sigin to the game.\n   * @param name name of the user.\n   */\n  public createGame(playerId: string): Promise<any> {\n    return this.sendRequest(createGamePayload(playerId));\n  }\n\n  public joinGame(playerId: string, gameId: string): Promise<any> {\n    return this.sendRequest(joinGamePayload(playerId, gameId));\n  }\n\n  public startGame(gameId: string): Promise<any> {\n    return this.sendRequest(startGamePayload(gameId));\n  }\n\n  public chooseWord(gameId: string, word: string): Promise<any> {\n    return this.sendRequest(chooseWordPayload(gameId, word));\n  }\n\n  public chooseSpyMaster(gameId: string, playerId: string): Promise<any> {\n    return this.sendRequest(chooseSpyMasterPayload(gameId, playerId));\n  }\n\n  public leaveGame(gameId: string, playerId: string): Promise<any> {\n    return this.sendRequest(leaveGamePayload(gameId, playerId));\n  }\n\n  /**\n   * Checks the connection is alive or not.\n   */\n  public ping(): Promise<boolean> {\n    return this.sendRequest(pingPayload());\n  }\n\n  /**\n   * Opens the socket connection.\n   */\n  private openConnection() {\n    if (!ioClient.connected) {\n      ioClient.connect();\n    }\n  }\n\n  /**\n   * Helper to communicate with the socket server.\n   * @param payload The payload needs to send\n   */\n  private sendRequest(payload: any): Promise<any> {\n    this.openConnection();\n\n    return new Promise((resolve, reject) => {\n      ioClient.emit(\"data\", payload, (error: any, result: any) => {\n        if (error) {\n          reject(error);\n          return;\n        }\n\n        if (result.type === ResponseType.error) {\n          reject(result.message);\n        }\n\n        resolve(result.payload || true);\n      });\n    });\n  }\n}\n\nexport default GameService;\n","import * as common from \"@codenames/common\";\nimport { computed, observable } from \"mobx\";\nimport { persist } from \"mobx-persist\";\n\nimport GameService from \"../services/GameService\";\nimport { IStore } from \"./IStore\";\nimport { IGame } from \"./models/IGameInfo\";\nimport { IUser } from \"./models/IUserInfo\";\nimport { GameStatus } from \"@codenames/common\";\n\ninterface IPlayer {\n  name: string;\n  id: string;\n  isSpyMaster: boolean;\n}\n\nclass Store implements IStore {\n  @persist(\"object\")\n  @observable\n  private gameInfo: IGame = {};\n\n  @persist(\"object\")\n  @observable\n  private userInfo: IUser = {};\n\n  @persist(\"object\")\n  @observable\n  private notificationText: string = \"\";\n\n  private gameService: GameService;\n\n  constructor() {\n    this.gameService = new GameService(this.subscribeToNotifications);\n    this.initializeStore();\n  }\n\n  @computed\n  public get user() {\n    return this.userInfo;\n  }\n\n  @computed\n  public get game() {\n    return this.gameInfo;\n  }\n\n  @computed\n  public get newNotification() {\n    return !!this.notificationText;\n  }\n\n  @computed\n  public get notification() {\n    return this.notificationText;\n  }\n\n  public async ping() {\n    try {\n      await this.gameService.ping();\n      this.gameInfo.isConnected = true;\n    } catch (error) {\n      this.gameInfo.error = error;\n    }\n  }\n\n  public async signIn(name: string) {\n    try {\n      const player = await this.gameService.signIn(name);\n      this.setUserInfo(player);\n      this.userInfo.isSignedIn = true;\n    } catch (error) {\n      console.log(this.gameInfo.error);\n      this.gameInfo.error = error;\n      console.log(this.gameInfo.error);\n    }\n  }\n\n  private setUserInfo(player: IPlayer) {\n    this.userInfo = player;\n  }\n\n  public async createGame() {\n    if (this.userInfo.id == null) {\n      throw new Error(\"Login first\");\n    }\n\n    try {\n      const gameInfo = await this.gameService.createGame(this.userInfo.id);\n      this.gameInfo = gameInfo;\n      this.userInfo.gameId = gameInfo.id;\n    } catch (error) {\n      this.gameInfo.error = error;\n    }\n  }\n\n  public async joinGame(gameId: string) {\n    if (this.userInfo.id == null) {\n      throw new Error(\"Login first\");\n    }\n\n    try {\n      const gameInfo = await this.gameService.joinGame(\n        this.userInfo.id,\n        gameId\n      );\n      this.gameInfo = gameInfo;\n      this.userInfo.gameId = gameInfo.id;\n    } catch (error) {\n      this.gameInfo.error = error;\n    }\n  }\n\n  public async startGame() {\n    if (!this.gameInfo.id) {\n      throw new Error(\"Ned to join game first\");\n    }\n\n    try {\n      await this.gameService.startGame(this.gameInfo.id);\n    } catch (error) {\n      this.gameInfo.error = error;\n    }\n  }\n\n  public async chooseWord(word: string) {\n    if (!this.gameInfo.id) {\n      throw new Error(\"Need to join game first\");\n    }\n\n    try {\n      await this.gameService.chooseWord(this.gameInfo.id, word);\n    } catch (error) {\n      this.gameInfo.error = error;\n    }\n  }\n\n  public async chooseSpyMaster() {\n    if (!this.gameInfo.id) {\n      throw new Error(\"Need to join game first\");\n    }\n\n    if (!this.user.id) {\n      throw new Error(\"Need to login first\");\n    }\n\n    try {\n      const spyMasterCards = await this.gameService.chooseSpyMaster(\n        this.gameInfo.id,\n        this.user.id\n      );\n\n      this.gameInfo.cards?.forEach((card, index) => {\n        card.type = spyMasterCards[index].type;\n      });\n\n      this.user.isSpymMaster = true;\n    } catch (error) {\n      this.gameInfo.error = error;\n    }\n  }\n\n  public async leaveGame() {\n    if (!this.gameInfo.id) {\n      throw new Error(\"Need to join game first\");\n    }\n\n    if (!this.user.id) {\n      throw new Error(\"Need to login first\");\n    }\n\n    try {\n      this.gameService.leaveGame(this.gameInfo.id, this.user.id);\n      this.initializeStore();\n    } catch (error) {\n      this.gameInfo.error = error;\n    }\n  }\n\n  public setNotification(text: string) {\n    this.notificationText = text;\n  }\n\n  public clearNotifications() {\n    this.notificationText = \"\";\n  }\n\n  public clearErrors() {\n    this.gameInfo.error = \"\";\n  }\n\n  private initializeStore() {\n    this.gameInfo = {};\n    this.userInfo = {\n      ...this.userInfo,\n      isSpymMaster: false,\n      gameId: undefined,\n    };\n  }\n\n  private subscribeToNotifications = (\n    response: common.SuccessResponse | common.ErrorResponse\n  ) => {\n    console.log(`Got response: ${response}`);\n\n    const error = (response as common.ErrorResponse).message;\n\n    if (error) {\n      this.gameInfo.error = error;\n      return;\n    }\n\n    const payload = (response as common.SuccessResponse).payload || {};\n    const { action = \"\", data = {} } = payload as common.GameActionResponse;\n\n    switch (action) {\n      // case common.MESSAGES.gameStarted:\n      //   this.initializeStore();\n      //   this.gameInfo.status = IN_PROGESS;\n      //   this.gameInfo.notification = `Game started. Good Luck!`;\n      //   break;\n\n      case common.MESSAGES.words:\n        this.gameInfo.cards = (data as common.IWords).words.map((word: any) => {\n          return { word, chosen: false };\n        });\n        // TODO: make this into new message\n        this.gameInfo.status = GameStatus.InProgress;\n        break;\n\n      case common.MESSAGES.playersInfo:\n        this.gameInfo.players = (data as common.IPlayers).players;\n        break;\n\n      case common.MESSAGES.cardInfo:\n        const cardData = data as common.ICard;\n\n        if (this.gameInfo.cards == null) {\n          break;\n        }\n\n        let index = this.gameInfo.cards?.findIndex(\n          (card) => card.word === cardData.word\n        );\n\n        this.gameInfo.cards = this.gameInfo.cards.map((card, i) => {\n          if (i === index) {\n            return { ...cardData, chosen: true };\n          }\n\n          return card;\n        });\n\n        break;\n\n      case common.MESSAGES.spyMastersInfo:\n        this.gameInfo.spyMasters = (data as common.IPlayers).players;\n        break;\n\n      case common.MESSAGES.gameNotification:\n        this.notificationText = (data as common.IGameNotification).notification;\n        break;\n\n      case common.MESSAGES.gameAborted:\n        this.initializeStore();\n        this.gameInfo.error =\n          (data as common.IGameAborted).reason ||\n          \"Ooops Something went wrong. Sorry for the incovenience\";\n        break;\n\n      default:\n        console.log(`Default case. Shouldn't hit this. operation: ${action}`);\n        break;\n    }\n  };\n}\n\nconst store = new Store();\nexport default store;\n","import React from \"react\";\nimport { Provider } from \"mobx-react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./components/App\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nimport gameStore from \"./stores/store\";\n\nimport \"bootstrap/dist/css/bootstrap.min.css\";\nimport \"semantic-ui-css/semantic.min.css\";\n\nReactDOM.render(\n  <Provider store={gameStore}>\n    <App />\n  </Provider>,\n  document.getElementById(\"root\")\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","\"use strict\";\nfunction __export(m) {\n    for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];\n}\nObject.defineProperty(exports, \"__esModule\", { value: true });\n__export(require(\"./responses\"));\n__export(require(\"./messages\"));\n__export(require(\"./payloads\"));\n__export(require(\"./constants\"));\n//# sourceMappingURL=index.js.map","module.exports = __webpack_public_path__ + \"static/media/blue.a91846a9.jpeg\";","module.exports = __webpack_public_path__ + \"static/media/red.e34ad243.jpeg\";","module.exports = __webpack_public_path__ + \"static/media/civilian.75a5f2bf.jpg\";","module.exports = __webpack_public_path__ + \"static/media/assasin.60a0e58c.jpg\";"],"sourceRoot":""}