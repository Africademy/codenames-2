{"version":3,"sources":["assets/images/default.jpg","../../../src/messages/index.ts","../../../src/responses/index.ts","../../../src/responses/responseCodes.ts","../../../src/responses/responses.ts","../../../src/payloads/index.ts","../../../src/constants/index.ts","components/rules/Rules.tsx","components/login/login.tsx","components/main_menu/MainMenu.tsx","components/card/Card.tsx","components/game_grid/GameGrid.tsx","components/new_game_modal/NewGameModal.tsx","components/spymaster_grid/SpyMasterGrid.tsx","components/game/Game.tsx","components/game_header/GameHeader.tsx","components/home/Home.tsx","components/App.tsx","serviceWorker.js","services/GameService.ts","stores/store.ts","index.tsx","../../src/index.ts","assets/images/blue.jpeg","assets/images/red.jpeg","assets/images/civilian.jpg","assets/images/assasin.jpg"],"names":["module","exports","ResponseType","CardType","GameStatus","Rules","Message","as","attached","Segment","Component","Login","inject","observer","props","inputRef","onSubmit","event","preventDefault","onSignIn","a","store","signIn","state","name","value","handleChange","bind","this","Form","className","Group","controlId","Label","Control","plaintext","placeholder","onChange","Button","variant","size","block","onClick","setState","target","MainMenu","onCreateGame","createGame","onJoinGame","joinGame","gameId","handleShow","show","handleClose","handleGameIdChange","user","isSignedIn","Modal","onHide","aria-labelledby","centered","Header","closeButton","Title","Body","Footer","Card","word","card","cardStyle","width","undefined","type","chosen","cardHighlightColour","style","key","Img","src","cardImage","height","Assasin","Blue","Red","Civilian","console","log","defaultImage","assasinImage","blueImage","redImage","civilianImage","GameGrid","COLS","cardTable","cards","returnedArray","currentArray","forEach","index","push","prevProps","onCardClick","map","Row","Col","md","NewGameModal","onStartGame","startGame","game","status","New","Error","Dialog","id","formattedPlayerNames","players","player","SpyMasterGrid","typeTable","typeArr","typeImage","Game","handleSnackbarClose","clearNotifications","handleDialogClose","clearGameOverReason","chooseWord","length","isSpymMaster","Snackbar","open","newNotification","autoHideDuration","onClose","elevation","severity","notification","Over","gameOverReason","aria-describedby","fullWidth","maxWidth","DialogTitle","DialogContent","DialogContentText","DialogActions","color","GameHeader","onBeSpyMaster","chooseSpyMaster","onLeaveGame","leaveGame","onReplayGame","replayGame","float","join","spyMasters","Home","App","handleErrorClose","clearErrors","error","Boolean","window","location","hostname","match","connection","document","protocol","host","ioClient","io","timeout","GameService","subscribeToNotifications","on","setInterval","ping","then","sendRequest","loginPayload","playerId","createGamePayload","joinGamePayload","startGamePayload","chooseWordPayload","chooseSpyMasterPayload","leaveGamePayload","replayGamePayload","pingPayload","connected","connect","payload","openConnection","Promise","resolve","reject","emit","result","message","persist","gameService","response","gameInfo","action","data","common","words","InProgress","playersInfo","cardInfo","cardData","findIndex","i","spyMastersInfo","gameNotification","notificationText","gameAborted","initializeStore","reason","gameOver","newGameCreated","userInfo","isConnected","setUserInfo","spyMasterCards","text","observable","computed","ReactDOM","render","gameStore","getElementById","navigator","serviceWorker","ready","registration","unregister","catch"],"mappings":"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","file":"static/js/main.4b7396da.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/default.20a5c089.jpg\";","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.MESSAGES = {\n    pong: \"PONG\",\n    ping: \"PING\",\n    login: \"LOGIN\",\n    logout: \"LOGOUT\",\n    joinGame: \"JOIN_GAME\",\n    createGame: \"CREATE_GAME\",\n    startGame: \"START_GAME\",\n    leaveGame: \"LEAVE_GAME\",\n    replayGame: \"REPLAY_GAME\",\n    chooseWord: \"CHOOSE_WORD\",\n    chooseSpyMaster: \"CHOOSE_SPY_MASTER\",\n    playAgain: \"PLAY_AGAIN\",\n    gameOver: \"GAME_OVER\",\n    gameAborted: \"GAME_ABORTED\",\n    newGameCreated: \"NEW_GAME_CREATED\",\n    gameNotification: \"GAME_NOTIFICATION\",\n    words: \"WORDS\",\n    playersInfo: \"PLAYERS_INFO\",\n    spyMastersInfo: \"SPYMASTERS_INFO\",\n    cardInfo: \"CARD_INFO\",\n};\n//# sourceMappingURL=index.js.map","\"use strict\";\nfunction __export(m) {\n    for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];\n}\nObject.defineProperty(exports, \"__esModule\", { value: true });\n__export(require(\"./responseCodes\"));\n__export(require(\"./responses\"));\n//# sourceMappingURL=index.js.map","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.RESPONSE_CODES = {\n    success: \"SUCCESS\",\n    failed: \"FAILED\",\n    loginFailed: \"LOGIN_FAILED\",\n    loginSuccess: \"LOGIN_SUCCESS\",\n    gameNotification: \"GAME_NOTIFICATION\"\n};\n//# sourceMappingURL=responseCodes.js.map","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar ResponseType;\n(function (ResponseType) {\n    ResponseType[ResponseType[\"error\"] = 0] = \"error\";\n    ResponseType[ResponseType[\"info\"] = 1] = \"info\";\n})(ResponseType = exports.ResponseType || (exports.ResponseType = {}));\n//# sourceMappingURL=responses.js.map","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nconst messages_1 = require(\"../messages\");\nexports.loginPayload = (name) => {\n    return { operation: messages_1.MESSAGES.login, payload: { name } };\n};\nexports.createGamePayload = (playerId) => {\n    return { operation: messages_1.MESSAGES.createGame, payload: { playerId } };\n};\nexports.joinGamePayload = (playerId, gameId) => {\n    return { operation: messages_1.MESSAGES.joinGame, payload: { playerId, gameId } };\n};\nexports.startGamePayload = (gameId) => {\n    return { operation: messages_1.MESSAGES.startGame, payload: { gameId } };\n};\nexports.chooseWordPayload = (gameId, playerId, word) => {\n    return {\n        operation: messages_1.MESSAGES.chooseWord,\n        payload: { gameId, playerId, word },\n    };\n};\nexports.chooseSpyMasterPayload = (gameId, playerId) => {\n    return { operation: messages_1.MESSAGES.chooseSpyMaster, payload: { gameId, playerId } };\n};\nexports.leaveGamePayload = (gameId, playerId) => {\n    return { operation: messages_1.MESSAGES.leaveGame, payload: { gameId, playerId } };\n};\nexports.replayGamePayload = (gameId, playerId) => {\n    return { operation: messages_1.MESSAGES.replayGame, payload: { gameId, playerId } };\n};\nexports.pingPayload = () => {\n    return { operation: messages_1.MESSAGES.ping, payload: { ping: \"ping\" } };\n};\n//# sourceMappingURL=index.js.map","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar CardType;\n(function (CardType) {\n    CardType[CardType[\"Blue\"] = 0] = \"Blue\";\n    CardType[CardType[\"Red\"] = 1] = \"Red\";\n    CardType[CardType[\"Civilian\"] = 2] = \"Civilian\";\n    CardType[CardType[\"Assasin\"] = 3] = \"Assasin\";\n})(CardType = exports.CardType || (exports.CardType = {}));\nvar GameStatus;\n(function (GameStatus) {\n    GameStatus[GameStatus[\"New\"] = 0] = \"New\";\n    GameStatus[GameStatus[\"InProgress\"] = 1] = \"InProgress\";\n    GameStatus[GameStatus[\"Over\"] = 2] = \"Over\";\n    GameStatus[GameStatus[\"Aborted\"] = 3] = \"Aborted\";\n})(GameStatus = exports.GameStatus || (exports.GameStatus = {}));\n//# sourceMappingURL=index.js.map","import React, { Component } from \"react\";\nimport { Message, Segment } from \"semantic-ui-react\";\n\nclass Rules extends Component<{}, {}> {\n  render() {\n    return (\n      <div>\n        <Message as=\"h4\" attached=\"top\">\n          How to play!\n        </Message>\n\n        <Segment attached={true}>\n          <ul>\n            <h5>How To</h5>\n            <li>Sign in with any name to play</li>\n            <li>\n              Afer successfully signing in you can either create a new game or\n              join an existing one\n            </li>\n            <li>\n              If creating a new game, you will get a game ID which you can share\n              with people you wish join the game\n            </li>\n            <li>\n              To join an existing game simply click \"Join Game\" and enter the ID\n              of the game you want to join\n            </li>\n          </ul>\n        </Segment>\n      </div>\n    );\n  }\n}\n\nexport default Rules;\n","import React, { Component } from \"react\";\nimport { inject, observer } from \"mobx-react\";\nimport { Form, Button } from \"react-bootstrap\";\n\nimport { IStore } from \"../../stores/IStore\";\n\nimport \"./login.css\";\n\ninterface IProps {\n  store?: IStore;\n}\n\ninterface IState {\n  name: string;\n}\n\n@inject(\"store\")\n@observer\nclass Login extends Component<IProps, IState> {\n  private inputRef: any;\n\n  private get store(): IStore {\n    return this.props.store as IStore;\n  }\n\n  constructor(props: IProps) {\n    super(props);\n    this.state = { name: \"\" };\n\n    this.handleChange = this.handleChange.bind(this);\n    this.onSignIn = this.onSignIn.bind(this);\n  }\n\n  render() {\n    return (\n      <Form className=\"form\" onSubmit={this.onSubmit}>\n        <Form.Group controlId=\"formPlaintextEmail\">\n          <Form.Label className=\"label\">Name</Form.Label>\n          <Form.Control\n            plaintext\n            placeholder=\"your name goes here\"\n            className=\"input\"\n            value={this.state.name}\n            onChange={this.handleChange}\n          />\n        </Form.Group>\n        <Button\n          variant=\"primary\"\n          size=\"lg\"\n          block\n          className=\"primary-button\"\n          onClick={this.onSignIn}\n        >\n          Sign In\n        </Button>\n      </Form>\n    );\n  }\n\n  private handleChange(event: any) {\n    this.setState({ name: event.target.value } as IState);\n  }\n\n  private onSubmit = (event: any) => {\n    event.preventDefault();\n    this.onSignIn();\n  };\n\n  private onSignIn = async () => {\n    await this.store.signIn(this.state.name);\n\n    if (this.inputRef) {\n      this.inputRef.value = \"\";\n    }\n  };\n}\n\nexport default Login;\n","import React, { Component } from \"react\";\n\nimport { inject, observer } from \"mobx-react\";\nimport { Form, Button, Modal } from \"react-bootstrap\";\n\nimport { IStore } from \"../../stores/IStore\";\n\nimport Login from \"../login/login\";\n\ninterface IProps {\n  store?: IStore;\n}\n\ninterface IState {\n  show: boolean;\n  gameId: string;\n}\n\n@inject(\"store\")\n@observer\nclass MainMenu extends Component<IProps, IState> {\n  private get store(): IStore {\n    return this.props.store as IStore;\n  }\n\n  constructor(props: IProps) {\n    super(props);\n    this.state = { show: false, gameId: \"\" };\n\n    this.onCreateGame = this.onCreateGame.bind(this);\n    this.onJoinGame = this.onJoinGame.bind(this);\n    this.handleShow = this.handleShow.bind(this);\n    this.handleClose = this.handleClose.bind(this);\n\n    this.handleGameIdChange = this.handleGameIdChange.bind(this);\n  }\n\n  render() {\n    if (!this.props.store?.user.isSignedIn) {\n      return <Login />;\n    }\n\n    // TODO: pull into its own component\n    return (\n      <>\n        <Form className=\"main-menu\">\n          <Button\n            variant=\"primary\"\n            size=\"lg\"\n            block\n            className=\"primary-button\"\n            onClick={this.onCreateGame}\n          >\n            Create New Game\n          </Button>\n          <br />\n          <Button\n            variant=\"primary\"\n            size=\"lg\"\n            block\n            className=\"primary-button\"\n            onClick={this.handleShow}\n          >\n            Join Existing Game\n          </Button>\n        </Form>\n        <Modal\n          show={this.state.show}\n          onHide={this.handleClose}\n          aria-labelledby=\"contained-modal-title-vcenter\"\n          centered\n        >\n          <Modal.Header closeButton>\n            <Modal.Title>Enter ID of game to join</Modal.Title>\n          </Modal.Header>\n          <Modal.Body>\n            <Form className=\"form\">\n              <Form.Group controlId=\"formPlaintextEmail\">\n                <Form.Control\n                  plaintext\n                  placeholder=\"game ID goes here\"\n                  className=\"input\"\n                  value={this.state.gameId}\n                  onChange={this.handleGameIdChange}\n                />\n              </Form.Group>\n            </Form>\n          </Modal.Body>\n          <Modal.Footer>\n            <Button variant=\"secondary\" onClick={this.handleClose}>\n              Close\n            </Button>\n            <Button variant=\"primary\" onClick={this.onJoinGame}>\n              Join Game\n            </Button>\n          </Modal.Footer>\n        </Modal>\n      </>\n    );\n  }\n\n  private onCreateGame = async () => {\n    await this.store.createGame();\n  };\n\n  private onJoinGame = async () => {\n    await this.store.joinGame(this.state.gameId);\n  };\n\n  private handleShow = async () => {\n    this.setState({ ...this.state, show: true });\n  };\n\n  private handleClose = async () => {\n    this.setState({ ...this.state, show: false });\n  };\n\n  private handleGameIdChange(event: any) {\n    this.setState({ ...this.state, gameId: event.target.value });\n  }\n}\n\nexport default MainMenu;\n","import React, { Component } from \"react\";\nimport { CardType } from \"@codenames/common\";\n\nimport { Card as BootstrapCard } from \"react-bootstrap\";\n\nimport blueImage from \"../../assets/images/blue.jpeg\";\nimport redImage from \"../../assets/images/red.jpeg\";\nimport civilianImage from \"../../assets/images/civilian.jpg\";\nimport assasinImage from \"../../assets/images/assasin.jpg\";\nimport defaultImage from \"../../assets/images/default.jpg\";\n\nimport { ICard } from \"src/stores/models/ICard\";\n\ninterface IProps {\n  card: ICard;\n  onClick: Function;\n}\n\nclass Card extends Component<IProps, {}> {\n  constructor(props: Readonly<IProps>) {\n    super(props);\n  }\n\n  onClick(word: string) {\n    this.props.onClick(word);\n  }\n\n  render() {\n    const { card } = this.props;\n\n    let cardStyle = { width: \"11rem\" };\n    if (card.type !== undefined && !card.chosen) {\n      cardStyle[\"boxShadow\"] = `0 0 2rem ${this.cardHighlightColour(card)}`;\n      cardStyle[\"border\"] = `0.5rem solid ${this.cardHighlightColour(card)}`;\n      cardStyle[\"borderRadius\"] = \"5px\";\n    }\n\n    return (\n      <BootstrapCard\n        onClick={() => this.onClick(card.word)}\n        style={cardStyle}\n        key={card.word}\n      >\n        <BootstrapCard.Img\n          variant=\"top\"\n          src={this.cardImage(card)}\n          style={{ height: \"11rem\" }}\n        />\n        <BootstrapCard.Body>\n          <BootstrapCard.Title>{card.word}</BootstrapCard.Title>\n        </BootstrapCard.Body>\n      </BootstrapCard>\n    );\n  }\n\n  private cardHighlightColour(card: ICard): string {\n    switch (card.type) {\n      case CardType.Assasin:\n        return \"#000000\";\n      case CardType.Blue:\n        return \"#0000FF\";\n      case CardType.Red:\n        return \"#FF0000\";\n      case CardType.Civilian:\n        return \"#E1C699\";\n      default:\n        console.log(\"should not hit this\");\n        return \"#FFFFFF\";\n    }\n  }\n\n  private cardImage(card: ICard): string {\n    if (!card.chosen) {\n      return defaultImage;\n    }\n\n    switch (card.type) {\n      case CardType.Assasin:\n        return assasinImage;\n      case CardType.Blue:\n        return blueImage;\n      case CardType.Red:\n        return redImage;\n      case CardType.Civilian:\n        return civilianImage;\n      default:\n        return defaultImage;\n    }\n  }\n}\n\nexport default Card;\n","import React, { Component } from \"react\";\n\nimport { ICard } from \"src/stores/models/ICard\";\nimport Card from \"../card/Card\";\nimport { Row, Col } from \"react-bootstrap\";\n\ninterface IProps {\n  cards: ICard[];\n  onCardClick: Function;\n}\n\ninterface IState {\n  cardTable: ICard[][];\n}\n\nclass GameGrid extends Component<IProps, IState> {\n  //TODO: generallize\n  COLS = 5;\n\n  constructor(props: IProps) {\n    super(props);\n\n    this.state = { cardTable: this.cardTable(this.props.cards) };\n  }\n\n  private cardTable(cards: ICard[]): ICard[][] {\n    let returnedArray: ICard[][] = [];\n    let currentArray: ICard[] = [];\n\n    cards.forEach((card, index) => {\n      currentArray.push(card);\n\n      if (index !== 0 && (index + 1) % this.COLS === 0) {\n        returnedArray.push(currentArray);\n        currentArray = [];\n      }\n    });\n\n    return returnedArray;\n  }\n\n  componentDidUpdate(prevProps: any) {\n    if (this.props !== prevProps) {\n      this.setState({\n        ...this.state,\n        cardTable: this.cardTable(this.props.cards),\n      });\n    }\n  }\n\n  render() {\n    const { onCardClick } = this.props;\n\n    return this.state.cardTable.map((cards) => (\n      <Row>\n        {cards.map((card) => {\n          return (\n            <Col md=\"auto\">\n              <Card key={card.word} card={card} onClick={onCardClick} />\n            </Col>\n          );\n        })}\n      </Row>\n    ));\n  }\n}\n\nexport default GameGrid;\n","import React, { Component } from \"react\";\nimport { inject, observer } from \"mobx-react\";\n\nimport { IStore } from \"../../stores/IStore\";\n\nimport { GameStatus } from \"@codenames/common\";\n\nimport Modal from \"react-bootstrap/Modal\";\nimport { Button } from \"react-bootstrap\";\n\ninterface IProps {\n  store?: IStore;\n}\n\n@inject(\"store\")\n@observer\nclass NewGameModal extends Component<IProps, {}> {\n  private get store(): IStore {\n    return this.props.store as IStore;\n  }\n\n  constructor(props: IProps) {\n    super(props);\n\n    this.onStartGame = this.onStartGame.bind(this);\n  }\n\n  private get formattedPlayerNames() {\n    return this.store.game.players?.map((player) => {\n      return (\n        <h4>\n          {player}\n          <br />\n        </h4>\n      );\n    });\n  }\n\n  private onStartGame = async () => {\n    await this.store.startGame();\n  };\n\n  render() {\n    if (this.store.game.status !== GameStatus.New) {\n      throw new Error(\"Cards need to be present\");\n    }\n\n    return (\n      <Modal.Dialog>\n        <Modal.Header>\n          <Modal.Title>Game Id: {this.store.game.id}</Modal.Title>\n        </Modal.Header>\n\n        <Modal.Body>{this.formattedPlayerNames}</Modal.Body>\n\n        <Modal.Footer>\n          <Button variant=\"primary\" onClick={this.onStartGame}>\n            Start Game\n          </Button>\n        </Modal.Footer>\n      </Modal.Dialog>\n    );\n  }\n}\n\nexport default NewGameModal;\n","import React, { Component } from \"react\";\n\nimport { Card as BootstrapCard } from \"react-bootstrap\";\nimport { Row, Col } from \"react-bootstrap\";\nimport { Message, Segment } from \"semantic-ui-react\";\n\nimport { CardType } from \"@codenames/common\";\n\nimport { ICard } from \"src/stores/models/ICard\";\n\nimport blueImage from \"../../assets/images/blue.jpeg\";\nimport redImage from \"../../assets/images/red.jpeg\";\nimport civilianImage from \"../../assets/images/civilian.jpg\";\nimport assasinImage from \"../../assets/images/assasin.jpg\";\n\ninterface IProps {\n  cards: ICard[];\n}\n\ninterface IState {\n  typeTable: CardType[][];\n}\n\nclass SpyMasterGrid extends Component<IProps, IState> {\n  //TODO: move to const file\n  COLS = 5;\n\n  constructor(props: IProps) {\n    super(props);\n\n    this.state = { typeTable: this.typeTable(this.props.cards) };\n  }\n\n  private typeTable(cards: ICard[]): CardType[][] {\n    let returnedArray: CardType[][] = [];\n    let currentArray: CardType[] = [];\n\n    cards.forEach((card, index) => {\n      if (card.type == null) {\n        throw new Error(`Missing type for card ${card.word}`);\n      }\n\n      currentArray.push(card.type);\n\n      if (index !== 0 && (index + 1) % this.COLS === 0) {\n        returnedArray.push(currentArray);\n        currentArray = [];\n      }\n    });\n\n    return returnedArray;\n  }\n\n  render() {\n    return (\n      <>\n        <Message as=\"h4\" attached=\"top\">\n          Spy Masters Grid\n        </Message>\n        <Segment attached={true}>\n          {this.state.typeTable.map((typeArr) => (\n            <Row>\n              {typeArr.map((type) => {\n                return (\n                  <Col md=\"auto\">\n                    <BootstrapCard style={{ width: \"5rem\" }}>\n                      <BootstrapCard.Img src={this.typeImage(type)} />\n                    </BootstrapCard>\n                  </Col>\n                );\n              })}\n            </Row>\n          ))}\n        </Segment>\n      </>\n    );\n  }\n\n  private typeImage(type: CardType): string {\n    switch (type) {\n      case CardType.Assasin:\n        return assasinImage;\n      case CardType.Blue:\n        return blueImage;\n      case CardType.Red:\n        return redImage;\n      case CardType.Civilian:\n        return civilianImage;\n      default:\n        console.log(\"should not be reached\");\n        return \"\";\n    }\n  }\n}\n\nexport default SpyMasterGrid;\n","import React, { Component } from \"react\";\nimport { inject, observer } from \"mobx-react\";\n\nimport { IStore } from \"../../stores/IStore\";\n\nimport GameGrid from \"../game_grid/GameGrid\";\n\nimport Snackbar from \"@material-ui/core/Snackbar\";\nimport MuiAlert from \"@material-ui/lab/Alert\";\nimport Button from \"@material-ui/core/Button\";\nimport Dialog from \"@material-ui/core/Dialog\";\nimport DialogActions from \"@material-ui/core/DialogActions\";\nimport DialogContent from \"@material-ui/core/DialogContent\";\nimport DialogContentText from \"@material-ui/core/DialogContentText\";\nimport DialogTitle from \"@material-ui/core/DialogTitle\";\n\nimport { Row, Col } from \"react-bootstrap\";\n\nimport { GameStatus } from \"@codenames/common\";\nimport NewGameModal from \"../new_game_modal/NewGameModal\";\nimport SpyMasterGrid from \"../spymaster_grid/SpyMasterGrid\";\n\ninterface IProps {\n  store?: IStore;\n}\n\n@inject(\"store\")\n@observer\nclass Game extends Component<IProps, {}> {\n  private get store(): IStore {\n    return this.props.store as IStore;\n  }\n\n  constructor(props: IProps) {\n    super(props);\n  }\n\n  handleSnackbarClose = () => {\n    this.store.clearNotifications();\n  };\n\n  handleDialogClose = () => {\n    this.store.clearGameOverReason();\n  };\n\n  onCardClick = (word: string) => {\n    this.store.chooseWord(word);\n  };\n\n  render() {\n    if (this.store.game.status === GameStatus.New) {\n      return <NewGameModal />;\n    }\n\n    if (this.store.game.cards == null || this.store.game.cards.length === 0) {\n      throw new Error(\"Cards need to be present\");\n    }\n\n    return (\n      <>\n        <Row>\n          <Col md=\"auto\">\n            <GameGrid\n              cards={this.store.game.cards}\n              onCardClick={this.onCardClick}\n            />\n          </Col>\n          <Col md=\"auto\">\n            {this.store.user.isSpymMaster && (\n              <SpyMasterGrid cards={this.store.game.cards} />\n            )}\n          </Col>\n        </Row>\n\n        <Snackbar\n          open={this.store.newNotification}\n          autoHideDuration={6000}\n          onClose={this.handleSnackbarClose}\n        >\n          <MuiAlert\n            onClose={this.handleSnackbarClose}\n            elevation={6}\n            variant=\"filled\"\n            severity=\"info\"\n          >\n            {this.store.notification}\n          </MuiAlert>\n        </Snackbar>\n\n        <Dialog\n          open={\n            this.store.game.status === GameStatus.Over &&\n            !!this.store.game.gameOverReason\n          }\n          onClose={this.handleDialogClose}\n          aria-labelledby=\"alert-dialog-title\"\n          aria-describedby=\"alert-dialog-description\"\n          fullWidth={true}\n          maxWidth=\"sm\"\n        >\n          <DialogTitle id=\"alert-dialog-title\">{\"Game Over!\"}</DialogTitle>\n          <DialogContent>\n            <DialogContentText id=\"alert-dialog-description\">\n              {this.store.game.gameOverReason}\n            </DialogContentText>\n          </DialogContent>\n          <DialogActions>\n            <Button onClick={this.handleDialogClose} color=\"primary\">\n              Close\n            </Button>\n          </DialogActions>\n        </Dialog>\n      </>\n    );\n  }\n}\n\nexport default Game;\n","import React, { Component } from \"react\";\nimport { inject, observer } from \"mobx-react\";\n\nimport { Message, Segment } from \"semantic-ui-react\";\n\nimport { GameStatus } from \"@codenames/common\";\n\nimport { IStore } from \"../../stores/IStore\";\n\ninterface IProps {\n  store?: IStore;\n}\n\n@inject(\"store\")\n@observer\nclass GameHeader extends Component<IProps, {}> {\n  private get store(): IStore {\n    return this.props.store as IStore;\n  }\n\n  constructor(props: IProps) {\n    super(props);\n  }\n\n  onBeSpyMaster = () => {\n    this.store.chooseSpyMaster();\n  };\n\n  onLeaveGame = () => {\n    this.store.leaveGame();\n  };\n\n  onReplayGame = () => {\n    this.store.replayGame();\n  };\n\n  render() {\n    return (\n      <div>\n        <Message as=\"h4\" attached=\"top\">\n          Menu\n          {this.store.game.status === GameStatus.Over && (\n            <input\n              type=\"button\"\n              value=\"Start New Game\"\n              style={{ float: \"right\" }}\n              onClick={this.onReplayGame}\n            />\n          )}\n          <input\n            type=\"button\"\n            value=\"Leave Game\"\n            style={{ float: \"right\" }}\n            onClick={this.onLeaveGame}\n          />\n        </Message>\n\n        <Segment attached={true}>\n          <div>Players: {this.store.game.players?.join(\" , \")}</div>\n          <div>\n            Spy Masters: {this.store.game.spyMasters?.join(\" & \")}\n            <input\n              type=\"button\"\n              value=\"Be Spy Master!\"\n              onClick={this.onBeSpyMaster}\n              style={{ float: \"right\" }}\n            />\n          </div>\n        </Segment>\n      </div>\n    );\n  }\n}\n\nexport default GameHeader;\n","import React, { Component, Fragment } from \"react\";\nimport { inject, observer } from \"mobx-react\";\n\nimport { IStore } from \"../../stores/IStore\";\n\nimport Rules from \"../rules/Rules\";\nimport MainMenu from \"../main_menu/MainMenu\";\nimport Game from \"../game/Game\";\nimport GameHeader from \"../game_header/GameHeader\";\n\nimport \"./home.css\";\n\ninterface IProps {\n  store?: IStore;\n}\n\n@inject(\"store\")\n@observer\nclass Home extends Component<IProps, {}> {\n  private get store(): IStore {\n    return this.props.store as IStore;\n  }\n\n  constructor(props: IProps) {\n    super(props);\n  }\n\n  render() {\n    if (!this.store.game.id) {\n      return (\n        <Fragment>\n          <Rules />\n          <MainMenu />\n        </Fragment>\n      );\n    }\n\n    return (\n      <Fragment>\n        <GameHeader />\n        <Game />\n      </Fragment>\n    );\n  }\n}\n\nexport default Home;\n","import React, { Component } from \"react\";\nimport { inject, observer } from \"mobx-react\";\n\nimport Snackbar from \"@material-ui/core/Snackbar\";\nimport MuiAlert from \"@material-ui/lab/Alert\";\n\nimport { IStore } from \"src/stores/IStore\";\n\nimport Home from \"./home/Home\";\n\nimport \"./App.css\";\n\ninterface IProps {\n  store?: IStore;\n}\n\n@inject(\"store\")\n@observer\nclass App extends Component<IProps, {}> {\n  private get store(): IStore {\n    return this.props.store as IStore;\n  }\n\n  constructor(props: IProps) {\n    super(props);\n\n    this.handleErrorClose = this.handleErrorClose.bind(this);\n  }\n\n  private handleErrorClose() {\n    this.store.clearErrors();\n  }\n\n  render() {\n    return (\n      <>\n        <Home />\n        <Snackbar\n          open={!!this.store.game.error}\n          autoHideDuration={10000}\n          onClose={this.handleErrorClose}\n        >\n          <MuiAlert\n            elevation={6}\n            variant=\"filled\"\n            severity=\"error\"\n            onClose={this.handleErrorClose}\n          >\n            {this.store.game.error}\n          </MuiAlert>\n        </Snackbar>\n      </>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import {\n  // chooseWordPayload,\n  // createGamePayload,\n  joinGamePayload,\n  loginPayload,\n  pingPayload,\n  ResponseType,\n  SuccessResponse,\n  createGamePayload,\n  startGamePayload,\n  chooseWordPayload,\n  chooseSpyMasterPayload,\n  leaveGamePayload,\n  replayGamePayload,\n} from \"@codenames/common\";\nimport * as io from \"socket.io-client\";\n\nconst ifDevelopment = process.env.NODE_ENV === \"development\";\nconst connection = ifDevelopment\n  ? \"http://localhost:4500/\"\n  : document.location.protocol + \"//\" + document.location.host;\nconst ioClient: SocketIOClient.Socket = io.connect(connection, {\n  timeout: 200000,\n});\n\nclass GameService {\n  /**\n   * Initializes a new instance of the GameService.\n   * @param subscribeToNotifications The callback to subscribe notifications\n   */\n  constructor(\n    private subscribeToNotifications: (data: SuccessResponse, cb: any) => void\n  ) {\n    ioClient.on(\"data\", this.subscribeToNotifications);\n\n    setInterval(() => {\n      this.ping().then(() => \"\");\n    }, 30000);\n  }\n\n  /**\n   * Sigin to the game.\n   * @param name name of the user.\n   */\n  public signIn(name: string): Promise<any> {\n    return this.sendRequest(loginPayload(name));\n  }\n\n  /**\n   * Sigin to the game.\n   * @param name name of the user.\n   */\n  public createGame(playerId: string): Promise<any> {\n    return this.sendRequest(createGamePayload(playerId));\n  }\n\n  public joinGame(playerId: string, gameId: string): Promise<any> {\n    return this.sendRequest(joinGamePayload(playerId, gameId));\n  }\n\n  public startGame(gameId: string): Promise<any> {\n    return this.sendRequest(startGamePayload(gameId));\n  }\n\n  public chooseWord(\n    gameId: string,\n    playerId: string,\n    word: string\n  ): Promise<any> {\n    return this.sendRequest(chooseWordPayload(gameId, playerId, word));\n  }\n\n  public chooseSpyMaster(gameId: string, playerId: string): Promise<any> {\n    return this.sendRequest(chooseSpyMasterPayload(gameId, playerId));\n  }\n\n  public leaveGame(gameId: string, playerId: string): Promise<any> {\n    return this.sendRequest(leaveGamePayload(gameId, playerId));\n  }\n\n  public replayGame(gameId: string, playerId: string): Promise<any> {\n    return this.sendRequest(replayGamePayload(gameId, playerId));\n  }\n\n  /**\n   * Checks the connection is alive or not.\n   */\n  public ping(): Promise<boolean> {\n    return this.sendRequest(pingPayload());\n  }\n\n  /**\n   * Opens the socket connection.\n   */\n  private openConnection() {\n    if (!ioClient.connected) {\n      ioClient.connect();\n    }\n  }\n\n  /**\n   * Helper to communicate with the socket server.\n   * @param payload The payload needs to send\n   */\n  private sendRequest(payload: any): Promise<any> {\n    this.openConnection();\n\n    return new Promise((resolve, reject) => {\n      ioClient.emit(\"data\", payload, (error: any, result: any) => {\n        if (error) {\n          reject(error);\n          return;\n        }\n\n        if (result.type === ResponseType.error) {\n          reject(result.message);\n        }\n\n        resolve(result.payload || true);\n      });\n    });\n  }\n}\n\nexport default GameService;\n","import * as common from \"@codenames/common\";\nimport { computed, observable } from \"mobx\";\nimport { persist } from \"mobx-persist\";\n\nimport GameService from \"../services/GameService\";\nimport { IStore } from \"./IStore\";\nimport { IGame } from \"./models/IGameInfo\";\nimport { IUser } from \"./models/IUserInfo\";\nimport { GameStatus } from \"@codenames/common\";\n\ninterface IPlayer {\n  name: string;\n  id: string;\n  isSpyMaster: boolean;\n}\n\nclass Store implements IStore {\n  @persist(\"object\")\n  @observable\n  private gameInfo: IGame = {};\n\n  @persist(\"object\")\n  @observable\n  private userInfo: IUser = {};\n\n  @persist(\"object\")\n  @observable\n  private notificationText: string = \"\";\n\n  private gameService: GameService;\n\n  constructor() {\n    this.gameService = new GameService(this.subscribeToNotifications);\n    this.initializeStore();\n  }\n\n  @computed\n  public get user() {\n    return this.userInfo;\n  }\n\n  @computed\n  public get game() {\n    return this.gameInfo;\n  }\n\n  @computed\n  public get newNotification() {\n    return !!this.notificationText;\n  }\n\n  @computed\n  public get notification() {\n    return this.notificationText;\n  }\n\n  public async ping() {\n    try {\n      await this.gameService.ping();\n      this.gameInfo.isConnected = true;\n    } catch (error) {\n      this.gameInfo.error = error;\n    }\n  }\n\n  public async signIn(name: string) {\n    try {\n      const player = await this.gameService.signIn(name);\n      this.setUserInfo(player);\n      this.userInfo.isSignedIn = true;\n    } catch (error) {\n      this.gameInfo.error = error;\n    }\n  }\n\n  private setUserInfo(player: IPlayer) {\n    this.userInfo = player;\n  }\n\n  public async createGame() {\n    if (this.userInfo.id == null) {\n      throw new Error(\"Login first\");\n    }\n\n    try {\n      const gameInfo = await this.gameService.createGame(this.userInfo.id);\n      this.gameInfo = gameInfo;\n      this.userInfo.gameId = gameInfo.id;\n    } catch (error) {\n      this.gameInfo.error = error;\n    }\n  }\n\n  public async joinGame(gameId: string) {\n    if (this.userInfo.id == null) {\n      throw new Error(\"Login first\");\n    }\n\n    try {\n      const gameInfo = await this.gameService.joinGame(\n        this.userInfo.id,\n        gameId\n      );\n      this.gameInfo = gameInfo;\n      this.userInfo.gameId = gameInfo.id;\n    } catch (error) {\n      this.gameInfo.error = error;\n    }\n  }\n\n  public async startGame() {\n    if (!this.gameInfo.id) {\n      throw new Error(\"Ned to join game first\");\n    }\n\n    try {\n      await this.gameService.startGame(this.gameInfo.id);\n    } catch (error) {\n      this.gameInfo.error = error;\n    }\n  }\n\n  public async chooseWord(word: string) {\n    if (!this.gameInfo.id) {\n      throw new Error(\"Need to join game first\");\n    }\n\n    if (this.userInfo.id == null) {\n      throw new Error(\"Login first\");\n    }\n\n    try {\n      await this.gameService.chooseWord(\n        this.gameInfo.id,\n        this.userInfo.id,\n        word\n      );\n    } catch (error) {\n      this.gameInfo.error = error;\n    }\n  }\n\n  public async chooseSpyMaster() {\n    if (!this.gameInfo.id) {\n      throw new Error(\"Need to join game first\");\n    }\n\n    if (!this.user.id) {\n      throw new Error(\"Need to login first\");\n    }\n\n    try {\n      const spyMasterCards = await this.gameService.chooseSpyMaster(\n        this.gameInfo.id,\n        this.user.id\n      );\n\n      this.gameInfo.cards?.forEach((card, index) => {\n        card.type = spyMasterCards[index].type;\n      });\n\n      this.user.isSpymMaster = true;\n    } catch (error) {\n      this.gameInfo.error = error;\n    }\n  }\n\n  public async leaveGame() {\n    if (!this.gameInfo.id) {\n      throw new Error(\"Need to join game first\");\n    }\n\n    if (!this.user.id) {\n      throw new Error(\"Need to login first\");\n    }\n\n    try {\n      this.gameService.leaveGame(this.gameInfo.id, this.user.id);\n      this.initializeStore();\n    } catch (error) {\n      this.gameInfo.error = error;\n    }\n  }\n\n  public async replayGame() {\n    if (!this.gameInfo.id) {\n      throw new Error(\"Need to join game first\");\n    }\n\n    if (!this.user.id) {\n      throw new Error(\"Need to login first\");\n    }\n\n    try {\n      this.gameService.replayGame(this.gameInfo.id, this.user.id);\n    } catch (error) {\n      this.gameInfo.error = error;\n    }\n  }\n\n  public setNotification(text: string) {\n    this.notificationText = text;\n  }\n\n  public clearNotifications() {\n    this.notificationText = \"\";\n  }\n\n  public clearErrors() {\n    this.gameInfo.error = \"\";\n  }\n\n  public clearGameOverReason() {\n    this.gameInfo.gameOverReason = \"\";\n  }\n\n  private initializeStore() {\n    this.gameInfo = {};\n    this.userInfo = {\n      ...this.userInfo,\n      isSpymMaster: false,\n      gameId: undefined,\n    };\n  }\n\n  private subscribeToNotifications = (\n    response: common.SuccessResponse | common.ErrorResponse\n  ) => {\n    const error = (response as common.ErrorResponse).message;\n\n    if (error) {\n      this.gameInfo.error = error;\n      return;\n    }\n\n    const payload = (response as common.SuccessResponse).payload || {};\n    const { action = \"\", data = {} } = payload as common.GameActionResponse;\n\n    switch (action) {\n      // case common.MESSAGES.gameStarted:\n      //   this.initializeStore();\n      //   this.gameInfo.status = IN_PROGESS;\n      //   this.gameInfo.notification = `Game started. Good Luck!`;\n      //   break;\n\n      case common.MESSAGES.words:\n        this.gameInfo.cards = (data as common.IWords).words.map((word: any) => {\n          return { word, chosen: false };\n        });\n        // TODO: make this into new message\n        this.gameInfo.status = GameStatus.InProgress;\n        break;\n\n      case common.MESSAGES.playersInfo:\n        this.gameInfo.players = (data as common.IPlayers).players;\n        break;\n\n      case common.MESSAGES.cardInfo:\n        const cardData = data as common.ICard;\n\n        if (this.gameInfo.cards == null) {\n          break;\n        }\n\n        let index = this.gameInfo.cards?.findIndex(\n          (card) => card.word === cardData.word\n        );\n\n        this.gameInfo.cards = this.gameInfo.cards.map((card, i) => {\n          if (i === index) {\n            return { ...cardData, chosen: true };\n          }\n\n          return card;\n        });\n\n        break;\n\n      case common.MESSAGES.spyMastersInfo:\n        this.gameInfo.spyMasters = (data as common.IPlayers).players;\n        break;\n\n      case common.MESSAGES.gameNotification:\n        this.notificationText = (data as common.IGameNotification).notification;\n        break;\n\n      case common.MESSAGES.gameAborted:\n        this.initializeStore();\n        this.gameInfo.error =\n          (data as common.IGameAborted).reason ||\n          \"Ooops Something went wrong. Sorry for the incovenience\";\n        break;\n\n      case common.MESSAGES.gameOver:\n        this.gameInfo.status = GameStatus.Over;\n        this.gameInfo.gameOverReason =\n          (data as common.IGameOver).reason || \"The game is over !\";\n        break;\n\n      case common.MESSAGES.newGameCreated:\n        const gameId = (data as common.INewGameCreated).gameId;\n        this.gameInfo = { id: gameId, status: GameStatus.New };\n        this.userInfo = {\n          ...this.userInfo,\n          isSpymMaster: false,\n          gameId: gameId,\n        };\n        break;\n\n      default:\n        console.log(`Default case. Shouldn't hit this. operation: ${action}`);\n        break;\n    }\n  };\n}\n\nconst store = new Store();\nexport default store;\n","import React from \"react\";\nimport { Provider } from \"mobx-react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./components/App\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nimport gameStore from \"./stores/store\";\n\nimport \"bootstrap/dist/css/bootstrap.min.css\";\nimport \"semantic-ui-css/semantic.min.css\";\n\nReactDOM.render(\n  <Provider store={gameStore}>\n    <App />\n  </Provider>,\n  document.getElementById(\"root\")\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","\"use strict\";\nfunction __export(m) {\n    for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];\n}\nObject.defineProperty(exports, \"__esModule\", { value: true });\n__export(require(\"./responses\"));\n__export(require(\"./messages\"));\n__export(require(\"./payloads\"));\n__export(require(\"./constants\"));\n//# sourceMappingURL=index.js.map","module.exports = __webpack_public_path__ + \"static/media/blue.a91846a9.jpeg\";","module.exports = __webpack_public_path__ + \"static/media/red.e34ad243.jpeg\";","module.exports = __webpack_public_path__ + \"static/media/civilian.75a5f2bf.jpg\";","module.exports = __webpack_public_path__ + \"static/media/assasin.60a0e58c.jpg\";"],"sourceRoot":""}