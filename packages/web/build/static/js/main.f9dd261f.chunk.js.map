{"version":3,"sources":["../../src/index.ts","../../../src/messages/index.ts","../../../src/responses/index.ts","../../../src/responses/responseCodes.ts","../../../src/responses/responses.ts","../../../src/payloads/index.ts","../../../src/constants/index.ts","components/Rules.tsx","components/login/login.tsx","components/main_menu/MainMenu.tsx","card/Card.tsx","components/game_grid/GameGrid.tsx","components/new_game_modal/NewGameModal.tsx","components/game/Game.tsx","components/home/Home.tsx","components/App.tsx","serviceWorker.js","services/GameService.ts","stores/store.ts","index.tsx"],"names":["ResponseType","CardType","Rules","Message","as","attached","Segment","Component","Login","inject","observer","props","inputRef","onSignIn","a","store","signIn","state","name","value","handleChange","bind","this","Form","className","Group","controlId","Label","Control","plaintext","placeholder","onChange","Button","variant","size","block","onClick","event","setState","target","MainMenu","onCreateGame","createGame","onJoinGame","joinGame","gameId","handleShow","show","handleClose","handleGameIdChange","user","isSignedIn","Modal","onHide","aria-labelledby","centered","Header","closeButton","Title","Body","Footer","Card","word","type","style","width","Img","src","typeImage","Assasin","Blue","Red","GameGrid","COLS","cardTable","cards","returnedArray","currentArray","forEach","card","index","push","onCardClick","map","Row","Col","NewGameModal","onStartGame","startGame","game","status","GameStatus","New","Error","Dialog","id","formattedPlayerNames","players","player","Game","handleSnackbarClose","clearNotifications","length","styled","Home","App","Boolean","window","location","hostname","match","ioClient","io","timeout","GameService","subscribeToNotifications","on","sendRequest","loginPayload","playerId","createGamePayload","joinGamePayload","startGamePayload","disconnect","pingPayload","connected","connect","payload","openConnection","Promise","resolve","reject","emit","error","result","message","persist","gameService","response","console","log","gameInfo","action","data","common","words","InProgress","playersInfo","initializeStore","ping","isConnected","setUserInfo","userInfo","leaveGame","notificationText","observable","computed","ReactDOM","render","gameStore","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch"],"mappings":"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","file":"static/js/main.f9dd261f.chunk.js","sourcesContent":["\"use strict\";\nfunction __export(m) {\n    for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];\n}\nObject.defineProperty(exports, \"__esModule\", { value: true });\n__export(require(\"./responses\"));\n__export(require(\"./messages\"));\n__export(require(\"./payloads\"));\n__export(require(\"./constants\"));\n//# sourceMappingURL=index.js.map","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.MESSAGES = {\n    pong: \"PONG\",\n    ping: \"PING\",\n    login: \"LOGIN\",\n    logout: \"LOGOUT\",\n    joinGame: \"JOIN_GAME\",\n    createGame: \"CREATE_GAME\",\n    startGame: \"START_GAME\",\n    chooseWord: \"CHOOSE_WORD\",\n    playAgain: \"PLAY_AGAIN\",\n    gameOver: \"GAME_OVER\",\n    gameAborted: \"GAME_ABORTED\",\n    words: \"WORDS\",\n    playersInfo: \"PLAYERS_INFO\",\n    spyMastersInfo: \"SPYMASTERS_INFO\",\n    cardInfo: \"CARD_INFO\",\n};\n//# sourceMappingURL=index.js.map","\"use strict\";\nfunction __export(m) {\n    for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];\n}\nObject.defineProperty(exports, \"__esModule\", { value: true });\n__export(require(\"./responseCodes\"));\n__export(require(\"./responses\"));\n//# sourceMappingURL=index.js.map","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.RESPONSE_CODES = {\n    success: \"SUCCESS\",\n    failed: \"FAILED\",\n    loginFailed: \"LOGIN_FAILED\",\n    loginSuccess: \"LOGIN_SUCCESS\",\n    gameNotification: \"GAME_NOTIFICATION\"\n};\n//# sourceMappingURL=responseCodes.js.map","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar ResponseType;\n(function (ResponseType) {\n    ResponseType[ResponseType[\"error\"] = 0] = \"error\";\n    ResponseType[ResponseType[\"info\"] = 1] = \"info\";\n})(ResponseType = exports.ResponseType || (exports.ResponseType = {}));\n//# sourceMappingURL=responses.js.map","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nconst messages_1 = require(\"../messages\");\nexports.loginPayload = (name) => {\n    return { operation: messages_1.MESSAGES.login, payload: { name } };\n};\nexports.createGamePayload = (playerId) => {\n    return { operation: messages_1.MESSAGES.createGame, payload: { playerId } };\n};\nexports.joinGamePayload = (playerId, gameId) => {\n    return { operation: messages_1.MESSAGES.joinGame, payload: { playerId, gameId } };\n};\nexports.startGamePayload = (gameId) => {\n    return { operation: messages_1.MESSAGES.startGame, payload: { gameId } };\n};\nexports.pingPayload = () => {\n    return { operation: messages_1.MESSAGES.ping, payload: { ping: \"ping\" } };\n};\n//# sourceMappingURL=index.js.map","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar CardType;\n(function (CardType) {\n    CardType[CardType[\"Blue\"] = 0] = \"Blue\";\n    CardType[CardType[\"Red\"] = 1] = \"Red\";\n    CardType[CardType[\"Civilian\"] = 2] = \"Civilian\";\n    CardType[CardType[\"Assasin\"] = 3] = \"Assasin\";\n})(CardType = exports.CardType || (exports.CardType = {}));\nvar GameStatus;\n(function (GameStatus) {\n    GameStatus[GameStatus[\"New\"] = 0] = \"New\";\n    GameStatus[GameStatus[\"InProgress\"] = 1] = \"InProgress\";\n    GameStatus[GameStatus[\"Over\"] = 2] = \"Over\";\n})(GameStatus = exports.GameStatus || (exports.GameStatus = {}));\n//# sourceMappingURL=index.js.map","import React, { Component } from \"react\";\nimport { Message, Segment } from \"semantic-ui-react\";\n\nclass Rules extends Component<{}, {}> {\n  render() {\n    return (\n      <div>\n        <Message as=\"h4\" attached=\"top\">\n          How to play!\n        </Message>\n\n        <Segment attached={true}>\n          <ul>\n            <h5>Sign-in</h5>\n            <li>Sign in with any name to play</li>\n            <li>\n              Afer successfully signed in the player will be added to the game\n              pool and message will be notified to them.\n            </li>\n            <li>\n              Once\n              <u>\n                <i>\n                  <b> 6 players</b>\n                </i>\n              </u>{\" \"}\n              joined in the game pool the game will start and will be notified.\n              Untill then you hav to wait.\n            </li>\n          </ul>\n        </Segment>\n      </div>\n    );\n  }\n}\n\nexport default Rules;\n","import React, { Component } from \"react\";\nimport { inject, observer } from \"mobx-react\";\nimport { Form, Button } from \"react-bootstrap\";\n\nimport { IStore } from \"../../stores/IStore\";\n\nimport \"./login.css\";\n\ninterface IProps {\n  store?: IStore;\n}\n\ninterface IState {\n  name: string;\n}\n\n@inject(\"store\")\n@observer\nclass Login extends Component<IProps, IState> {\n  private inputRef: any;\n\n  private get store(): IStore {\n    return this.props.store as IStore;\n  }\n\n  constructor(props: IProps) {\n    super(props);\n    this.state = { name: \"\" };\n\n    this.handleChange = this.handleChange.bind(this);\n    this.onSignIn = this.onSignIn.bind(this);\n  }\n\n  render() {\n    return (\n      <Form className=\"form\">\n        <Form.Group controlId=\"formPlaintextEmail\">\n          <Form.Label className=\"label\">Name</Form.Label>\n          <Form.Control\n            plaintext\n            placeholder=\"your name goes here\"\n            className=\"input\"\n            value={this.state.name}\n            onChange={this.handleChange}\n          />\n        </Form.Group>\n        <Button\n          variant=\"primary\"\n          size=\"lg\"\n          block\n          className=\"primary-button\"\n          onClick={this.onSignIn}\n        >\n          Sign In\n        </Button>\n      </Form>\n    );\n  }\n\n  private handleChange(event: any) {\n    this.setState({ name: event.target.value } as IState);\n  }\n\n  private onSignIn = async () => {\n    await this.store.signIn(this.state.name);\n\n    if (this.inputRef) {\n      this.inputRef.value = \"\";\n    }\n  };\n}\n\nexport default Login;\n","import React, { Component } from \"react\";\n\nimport { inject, observer } from \"mobx-react\";\nimport { Form, Button, Modal } from \"react-bootstrap\";\n\nimport { IStore } from \"../../stores/IStore\";\n\nimport Login from \"../login/login\";\n\ninterface IProps {\n  store?: IStore;\n}\n\ninterface IState {\n  show: boolean;\n  gameId: string;\n}\n\n@inject(\"store\")\n@observer\nclass MainMenu extends Component<IProps, IState> {\n  private get store(): IStore {\n    return this.props.store as IStore;\n  }\n\n  constructor(props: IProps) {\n    super(props);\n    this.state = { show: false, gameId: \"\" };\n\n    this.onCreateGame = this.onCreateGame.bind(this);\n    this.onJoinGame = this.onJoinGame.bind(this);\n    this.handleShow = this.handleShow.bind(this);\n    this.handleClose = this.handleClose.bind(this);\n\n    this.handleGameIdChange = this.handleGameIdChange.bind(this);\n  }\n\n  render() {\n    if (!this.props.store?.user.isSignedIn) {\n      return <Login />;\n    }\n\n    // TODO: pull into its own component\n    return (\n      <>\n        <Form className=\"main-menu\">\n          <Button\n            variant=\"primary\"\n            size=\"lg\"\n            block\n            className=\"primary-button\"\n            onClick={this.onCreateGame}\n          >\n            Create New Game\n          </Button>\n          <br />\n          <Button\n            variant=\"primary\"\n            size=\"lg\"\n            block\n            className=\"primary-button\"\n            onClick={this.handleShow}\n          >\n            Join Existing Game\n          </Button>\n        </Form>\n        <Modal\n          show={this.state.show}\n          onHide={this.handleClose}\n          aria-labelledby=\"contained-modal-title-vcenter\"\n          centered\n        >\n          <Modal.Header closeButton>\n            <Modal.Title>Enter ID of game to join</Modal.Title>\n          </Modal.Header>\n          <Modal.Body>\n            <Form className=\"form\">\n              <Form.Group controlId=\"formPlaintextEmail\">\n                <Form.Control\n                  plaintext\n                  placeholder=\"game ID goes here\"\n                  className=\"input\"\n                  value={this.state.gameId}\n                  onChange={this.handleGameIdChange}\n                />\n              </Form.Group>\n            </Form>\n          </Modal.Body>\n          <Modal.Footer>\n            <Button variant=\"secondary\" onClick={this.handleClose}>\n              Close\n            </Button>\n            <Button variant=\"primary\" onClick={this.onJoinGame}>\n              Join Game\n            </Button>\n          </Modal.Footer>\n        </Modal>\n      </>\n    );\n  }\n\n  private onCreateGame = async () => {\n    await this.store.createGame();\n  };\n\n  private onJoinGame = async () => {\n    await this.store.joinGame(this.state.gameId);\n  };\n\n  private handleShow = async () => {\n    this.setState({ ...this.state, show: true });\n  };\n\n  private handleClose = async () => {\n    this.setState({ ...this.state, show: false });\n  };\n\n  private handleGameIdChange(event: any) {\n    this.setState({ ...this.state, gameId: event.target.value });\n  }\n}\n\nexport default MainMenu;\n","import React, { Component } from \"react\";\nimport { CardType } from \"@codenames/common\";\n\nimport { Card as BootstrapCard } from \"react-bootstrap\";\n\ninterface IProps {\n  word: String;\n  type?: CardType;\n  onClick: Function;\n}\n\nclass Card extends Component<IProps, {}> {\n  constructor(props: Readonly<IProps>) {\n    super(props);\n\n    this.onClick = this.onClick.bind(this);\n  }\n\n  onClick() {\n    this.props.onClick(this.props);\n  }\n\n  render() {\n    const { word, type } = this.props;\n\n    return (\n      <BootstrapCard style={{ width: \"12rem\" }}>\n        <BootstrapCard.Img variant=\"top\" src={this.typeImage(type)} />\n        <BootstrapCard.Body>\n          <BootstrapCard.Title>{word}</BootstrapCard.Title>\n        </BootstrapCard.Body>\n      </BootstrapCard>\n    );\n  }\n\n  private typeImage(type: CardType | undefined): string {\n    switch (type) {\n      case CardType.Assasin:\n        return \"../assets/images/assasin.jpg\";\n      case CardType.Blue:\n        return \"../assets/images/bue.jpeg\";\n      case CardType.Red:\n        return \"../assets/images/red.jpeg\";\n      default:\n        return \"../assets/images/civilian.jpg\";\n    }\n  }\n}\n\nexport default Card;\n","import React, { Component } from \"react\";\n\nimport { ICard } from \"src/stores/models/ICard\";\nimport Card from \"../../card/Card\";\nimport { Row, Col } from \"react-bootstrap\";\n\ninterface IProps {\n  cards: ICard[];\n  onCardClick: Function;\n}\n\ninterface IState {\n  cardTable: ICard[][];\n}\n\nclass GameGrid extends Component<IProps, IState> {\n  //TODO: generallize\n  COLS = 5;\n\n  constructor(props: IProps) {\n    super(props);\n\n    this.state = { cardTable: this.cardTable(this.props.cards) };\n  }\n\n  private cardTable(cards: ICard[]): ICard[][] {\n    let returnedArray: ICard[][] = [];\n    let currentArray: ICard[] = [];\n\n    cards.forEach((card, index) => {\n      currentArray.push(card);\n\n      if (index !== 0 && (index + 1) % this.COLS === 0) {\n        returnedArray.push(currentArray);\n        currentArray = [];\n      }\n    });\n\n    return returnedArray;\n  }\n\n  render() {\n    const { onCardClick } = this.props;\n\n    return this.state.cardTable.map((cards) => (\n      <Row>\n        {cards.map((card) => {\n          return (\n            <Col>\n              <Card word={card.word} type={card.type} onClick={onCardClick} />\n            </Col>\n          );\n        })}\n      </Row>\n    ));\n  }\n}\n\nexport default GameGrid;\n","import React, { Component } from \"react\";\nimport { inject, observer } from \"mobx-react\";\n\nimport { IStore } from \"../../stores/IStore\";\n\nimport { GameStatus } from \"@codenames/common\";\n\nimport Modal from \"react-bootstrap/Modal\";\nimport { Button } from \"react-bootstrap\";\n\ninterface IProps {\n  store?: IStore;\n}\n\n@inject(\"store\")\n@observer\nclass NewGameModal extends Component<IProps, {}> {\n  private get store(): IStore {\n    return this.props.store as IStore;\n  }\n\n  constructor(props: IProps) {\n    super(props);\n\n    this.onStartGame = this.onStartGame.bind(this);\n  }\n\n  private get formattedPlayerNames() {\n    return this.store.game.players?.map((player) => {\n      return (\n        <h4>\n          {player}\n          <br />\n        </h4>\n      );\n    });\n  }\n\n  private onStartGame = async () => {\n    await this.store.startGame();\n  };\n\n  render() {\n    if (this.store.game.status !== GameStatus.New) {\n      throw new Error(\"Cards need to be present\");\n    }\n\n    return (\n      <Modal.Dialog>\n        <Modal.Header>\n          <Modal.Title>Game Id: {this.store.game.id}</Modal.Title>\n        </Modal.Header>\n\n        <Modal.Body>{this.formattedPlayerNames}</Modal.Body>\n\n        <Modal.Footer>\n          <Button variant=\"primary\" onClick={this.onStartGame}>\n            Start Game\n          </Button>\n        </Modal.Footer>\n      </Modal.Dialog>\n    );\n  }\n}\n\nexport default NewGameModal;\n","import React, { Component } from \"react\";\nimport { inject, observer } from \"mobx-react\";\n\nimport { IStore } from \"../../stores/IStore\";\n\nimport GameGrid from \"../game_grid/GameGrid\";\n\n// import Snackbar from \"material-ui/Snackbar\";\nimport styled from \"styled-components\";\nimport { GameStatus } from \"@codenames/common\";\nimport NewGameModal from \"../new_game_modal/NewGameModal\";\n\ninterface IProps {\n  store?: IStore;\n}\n\n@inject(\"store\")\n@observer\nclass Game extends Component<IProps, {}> {\n  private get store(): IStore {\n    return this.props.store as IStore;\n  }\n\n  constructor(props: IProps) {\n    super(props);\n  }\n\n  handleSnackbarClose = () => {\n    this.store.clearNotifications();\n  };\n\n  onCardClick = () => {\n    // this.store.\n  };\n\n  render() {\n    if (this.store.game.status === GameStatus.New) {\n      return <NewGameModal />;\n    }\n\n    if (this.store.game.cards == null || this.store.game.cards.length === 0) {\n      throw new Error(\"Cards need to be present\");\n    }\n\n    return (\n      <GameGrid cards={this.store.game.cards} onCardClick={this.onCardClick} />\n      // <Snackbar\n      //   open={this.store.newNotification}\n      //   message={this.store.notification}\n      //   onRequestClose={this.handleSnackbarClose}\n      // />\n    );\n  }\n}\n\nexport default styled(Game)`\n  flex: 1;\n`;\n","import React, { Component, Fragment } from \"react\";\nimport { inject, observer } from \"mobx-react\";\n\nimport { IStore } from \"../../stores/IStore\";\n\nimport Rules from \"../Rules\";\nimport MainMenu from \"../main_menu/MainMenu\";\nimport Game from \"../game/Game\";\n\nimport \"./home.css\";\n\ninterface IProps {\n  store?: IStore;\n}\n\n@inject(\"store\")\n@observer\nclass Home extends Component<IProps, {}> {\n  private get store(): IStore {\n    return this.props.store as IStore;\n  }\n\n  constructor(props: IProps) {\n    super(props);\n  }\n\n  render() {\n    if (!this.store.game.id) {\n      return (\n        <Fragment>\n          <Rules />\n          <MainMenu />\n        </Fragment>\n      );\n    }\n\n    return <Game />;\n  }\n}\n\nexport default Home;\n","import React from \"react\";\nimport \"./App.css\";\n\nimport Home from \"./home/Home\";\n\nfunction App() {\n  return <Home />;\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import {\n  // chooseWordPayload,\n  // createGamePayload,\n  joinGamePayload,\n  loginPayload,\n  pingPayload,\n  ResponseType,\n  SuccessResponse,\n  createGamePayload,\n  startGamePayload,\n} from \"@codenames/common\";\nimport * as io from \"socket.io-client\";\n\nconst connection = \"http://localhost:4500/\";\n\nconst ioClient: SocketIOClient.Socket = io.connect(connection, {\n  timeout: 200000,\n});\n\nclass GameService {\n  /**\n   * Initializes a new instance of the GameService.\n   * @param subscribeToNotifications The callback to subscribe notifications\n   */\n  constructor(\n    private subscribeToNotifications: (data: SuccessResponse, cb: any) => void\n  ) {\n    ioClient.on(\"data\", this.subscribeToNotifications);\n\n    // setInterval(() => {\n    //   this.ping().then(() => \"\");\n    // }, 10000);\n  }\n\n  /**\n   * Sigin to the game.\n   * @param name name of the user.\n   */\n  public signIn(name: string): Promise<any> {\n    return this.sendRequest(loginPayload(name));\n  }\n\n  /**\n   * Sigin to the game.\n   * @param name name of the user.\n   */\n  public createGame(playerId: string): Promise<any> {\n    return this.sendRequest(createGamePayload(playerId));\n  }\n\n  public joinGame(playerId: string, gameId: string): Promise<any> {\n    return this.sendRequest(joinGamePayload(playerId, gameId));\n  }\n\n  public startGame(gameId: string): Promise<any> {\n    return this.sendRequest(startGamePayload(gameId));\n  }\n\n  // /**\n  //  * Sends the chosen word to the game server.\n  //  * @param word The word chosen\n  //  * @param gameId The gameId\n  //  * @param token The user token\n  //  */\n  // public chooseWord(word: string, gameId: string, token: string): Promise<any> {\n  //   return this.sendRequest(chooseWordPayload(word, gameId, token));\n  // }\n\n  /**\n   * Leave game. It will disconnect the socket from server.\n   */\n  public leaveGame() {\n    ioClient.disconnect();\n  }\n\n  /**\n   * Checks the connection is alive or not.\n   */\n  public ping(): Promise<boolean> {\n    return this.sendRequest(pingPayload());\n  }\n\n  /**\n   * Opens the socket connection.\n   */\n  private openConnection() {\n    if (!ioClient.connected) {\n      ioClient.connect();\n    }\n  }\n\n  /**\n   * Helper to communicate with the socket server.\n   * @param payload The payload needs to send\n   */\n  private sendRequest(payload: any): Promise<any> {\n    this.openConnection();\n\n    return new Promise((resolve, reject) => {\n      ioClient.emit(\"data\", payload, (error: any, result: any) => {\n        if (error) {\n          reject(error);\n          return;\n        }\n\n        if (result.type === ResponseType.error) {\n          reject(result.message);\n        }\n\n        resolve(result.payload || true);\n      });\n    });\n  }\n}\n\nexport default GameService;\n","import * as common from \"@codenames/common\";\nimport { computed, observable } from \"mobx\";\nimport { persist } from \"mobx-persist\";\n\nimport GameService from \"../services/GameService\";\nimport { IStore } from \"./IStore\";\nimport { IGame } from \"./models/IGameInfo\";\nimport { IUser } from \"./models/IUserInfo\";\nimport { GameStatus } from \"@codenames/common\";\n\ninterface IPlayer {\n  name: string;\n  id: string;\n  isSpyMaster: boolean;\n}\n\nclass Store implements IStore {\n  @persist(\"object\")\n  @observable\n  private gameInfo: IGame = {};\n\n  @persist(\"object\")\n  @observable\n  private userInfo: IUser = {};\n\n  @persist(\"object\")\n  @observable\n  private notificationText: string = \"\";\n\n  private gameService: GameService;\n\n  constructor() {\n    this.gameService = new GameService(this.subscribeToNotifications);\n    this.initializeStore();\n  }\n\n  @computed\n  public get user() {\n    return this.userInfo;\n  }\n\n  @computed\n  public get game() {\n    return this.gameInfo;\n  }\n\n  @computed\n  public get newNotification() {\n    return !!this.notificationText;\n  }\n\n  @computed\n  public get notification() {\n    return this.notificationText;\n  }\n\n  public async ping() {\n    try {\n      await this.gameService.ping();\n      this.gameInfo.isConnected = true;\n    } catch (error) {\n      this.gameInfo.error = error;\n    }\n  }\n\n  public async signIn(name: string) {\n    this.clearNotifications();\n\n    try {\n      const player = await this.gameService.signIn(name);\n      this.setUserInfo(player);\n      this.userInfo.isSignedIn = true;\n    } catch (error) {\n      this.gameInfo.error = error;\n    }\n  }\n\n  private setUserInfo(player: IPlayer) {\n    this.userInfo = player;\n  }\n\n  public async createGame() {\n    if (this.userInfo.id == null) {\n      throw new Error(\"Login first\");\n    }\n    try {\n      const gameInfo = await this.gameService.createGame(this.userInfo.id);\n      this.gameInfo = gameInfo;\n      this.userInfo.gameId = gameInfo.id;\n    } catch (error) {\n      this.gameInfo.error = error;\n    }\n  }\n\n  public async joinGame(gameId: string) {\n    if (this.userInfo.id == null) {\n      throw new Error(\"Login first\");\n    }\n\n    try {\n      const gameInfo = await this.gameService.joinGame(\n        this.userInfo.id,\n        gameId\n      );\n      this.gameInfo = gameInfo;\n      this.userInfo.gameId = gameInfo.id;\n    } catch (error) {\n      this.gameInfo.error = error;\n    }\n  }\n\n  public async startGame() {\n    if (!this.gameInfo.id) {\n      throw new Error(\"Ned to join game first\");\n    }\n\n    try {\n      await this.gameService.startGame(this.gameInfo.id);\n    } catch (error) {\n      this.gameInfo.error = error;\n    }\n  }\n\n  // public async chooseWord(word: string) {\n  //   const { gameId, token } = this.userInfo;\n  //   this.clearNotifications();\n\n  //   try {\n  //     const ack: common.SuccessResponse = await this.gameService.chooseWord(\n  //       word,\n  //       gameId as string,\n  //       token as string\n  //     );\n\n  //     if (ack.code === common.RESPONSE_CODES.success) {\n  //       this.gameInfo.droppedWords?.push(word);\n  //     }\n  //   } catch (error) {\n  //     this.game.error = JSON.stringify(error);\n  //   }\n  // }\n\n  public leaveGame() {\n    this.gameService.leaveGame();\n    this.initializeStore();\n  }\n\n  public clearNotifications() {\n    this.notificationText = \"\";\n  }\n\n  private initializeStore() {\n    this.gameInfo = {};\n    this.userInfo = {};\n    this.userInfo.isSignedIn = false;\n  }\n\n  private subscribeToNotifications = (\n    response: common.SuccessResponse | common.ErrorResponse\n  ) => {\n    console.log(`Got response: ${response}`);\n\n    const error = (response as common.ErrorResponse).message;\n\n    if (error) {\n      this.gameInfo.error = error;\n      return;\n    }\n\n    const payload = (response as common.SuccessResponse).payload || {};\n    const { action = \"\", data = {} } = payload as common.GameActionResponse;\n\n    switch (action) {\n      // case common.MESSAGES.gameStarted:\n      //   this.initializeStore();\n      //   this.gameInfo.status = IN_PROGESS;\n      //   this.gameInfo.notification = `Game started. Good Luck!`;\n      //   break;\n\n      case common.MESSAGES.words:\n        console.log(data);\n        this.gameInfo.cards = (data as common.IWords).words.map((word) => {\n          return { word };\n        });\n        // TODO: make this into new message\n        this.gameInfo.status = GameStatus.InProgress;\n        break;\n\n      case common.MESSAGES.playersInfo:\n        this.gameInfo.players = (data as common.IPlayers).players;\n        break;\n\n      // case common.MESSAGES.droppedCards:\n      //   this.gameInfo.droppedWords = (data as common.IDroppedCards).cards;\n      //   break;\n\n      // case common.MESSAGES.playerInfo:\n      //   this.gameInfo.players = (data as common.IPlayers).players;\n      //   break;\n\n      // case common.MESSAGES.gameAborted:\n      //   this.initializeStore();\n      //   this.gameInfo.notification =\n      //     (data as common.IGameAborted).reason ||\n      //     \"Something went wrong. Please try again!\";\n      //   break;\n\n      default:\n        console.log(\"Default case. Shouldn't hit this\");\n        break;\n    }\n  };\n}\n\nconst store = new Store();\nexport default store;\n","import React from \"react\";\nimport { Provider } from \"mobx-react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./components/App\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nimport gameStore from \"./stores/store\";\n\nimport \"bootstrap/dist/css/bootstrap.min.css\";\nimport \"semantic-ui-css/semantic.min.css\";\n\nReactDOM.render(\n  <Provider store={gameStore}>\n    <App />\n  </Provider>,\n  document.getElementById(\"root\")\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}